/*
 * MBDyn (C) is a multibody analysis code.
 * http://www.mbdyn.org
 *
 * Copyright (C) 1996-2023
 *
 * Pierangelo Masarati	<pierangelo.masarati@polimi.it>
 * Paolo Mantegazza	<paolo.mantegazza@polimi.it>
 *
 * Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
 * via La Masa, 34 - 20156 Milano, Italy
 * http://www.aero.polimi.it
 *
 * Changing this copyright notice is forbidden.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation (version 2 of the License).
 *
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 AUTHOR: Reinhard Resch <mbdyn-user@a1.net>
        Copyright (C) 2011(-2023) all rights reserved.

        The copyright of this code is transferred
        to Pierangelo Masarati and Paolo Mantegazza
        for use in the software MBDyn as described
        in the GNU Public License version 2.1
*/

set: real X0 = 20e-3;
set: real Y0 = 30e-3;
set: real Z0 = -15e-3;
set: real dX1 = 0;
set: real dY1 = 0;
set: real dZ1 = 0;
set: real dX2 = 0;
set: real dY2 = 0;
set: real dZ2 = 0;
set: real dXP = 0;
set: real dYP = 0;
set: real dZP = 0;
set: real dWX = 0;
set: real dWY = 0;
set: real dWZ = 0;
set: real dx = 50e-3;
set: real dy = 0;
set: real dz = 0;

set: real m = 2;
set: real J11 = 0.02;
set: real J22 = 0.02;
set: real J33 = 0.02;
set: real g = 9.81;

set: real theta_y = atan(0.9);
set: real theta_z = 0*pi/180;

set: integer node_id_slider = 1001;
set: integer node_id_ground = 1002;

set: integer prm_node_id_lambda1_1 = 1003;
set: integer prm_node_id_lambda2_1 = 1004;
set: integer prm_node_id_z_1 = 1005;
set: integer prm_node_id_zP_1 = 1006;
set: integer prm_node_id_tau_1 = 1007;
set: integer prm_node_id_lambda1_2 = 1008;
set: integer prm_node_id_lambda2_2 = 1009;
set: integer prm_node_id_z_2 = 1010;
set: integer prm_node_id_zP_2 = 1011;
set: integer prm_node_id_tau_2 = 1012;

set: integer body_id_slider = 2001;
set: integer joint_id_ground = 3001;
set: integer joint_id_slider1 = 3002;
set: integer joint_id_slider2 = 3003;
set: integer ref_id_slider = 4001;
set: integer ref_id_slider1 = 4002;
set: integer ref_id_slider2 = 4003;

begin: data;
        problem: initial value;	# the default
end: data;

begin: initial value;
        initial time: 0.;
        final time: 10;
        time step: 1e-3;

        max iterations: 20;
        tolerance: 1e-8, 1e-4;
        nonlinear solver: nox, modified, 10, keep jacobian matrix, jacobian operator, newton krylov, forcing term, type 2;
    method: ms, 0.6;
    derivatives tolerance: 1e-6, 1e-6;
    derivatives max iterations: 10;
    derivatives coefficient: auto;
    linear solver: naive, colamd;
    nonlinear solver: newton raphson;
        eigenanalysis: list, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        suffix width, 2,
    output matrices,
        parameter, 0.01,
        output eigenvectors, output geometry,
    use lapack, balance, permute;
    threads: assembly, 1;
    output: messages;
end: initial value;

begin: control data;
    include: "inline_joint_ad_2_parameters.set";
    output meter: closest next, 0, forever, const, 0.1;
    default output: all;
        structural nodes: 2;
    rigid bodies: 1;
    loadable elements: 2-2*traditional;
    joints: 1+2*traditional;
        max iterations: 10;
        tolerance: 1e-6;
        gravity;
        print: dof description;

use: loadable elements, in assembly;
end: control data;

reference: ref_id_slider,
    position, reference, global, X0, Y0, Z0,
    orientation, reference, global, matr,       cos(theta_y) * cos(theta_z),	-sin(theta_z),	sin(theta_y) * cos(theta_z),
                                                                            cos(theta_y) * sin(theta_z),	 cos(theta_z),	sin(theta_y) * sin(theta_z),
                                                                            -sin(theta_y),		                                           0.,					cos(theta_y),
    velocity,         reference, global, null,
    angular velocity, reference, global, null;

reference: ref_id_slider1,
    position, reference, ref_id_slider, dx/2, dy, dz,
    orientation, reference, ref_id_slider, eye,
    velocity, reference, ref_id_slider, null,
    angular velocity, reference, ref_id_slider, null;

reference: ref_id_slider2,
    position, reference, ref_id_slider, -dx/2, dy, dz,
    orientation, reference, ref_id_slider, eye,
    velocity, reference, ref_id_slider, null,
    angular velocity, reference, ref_id_slider, null;

begin: nodes;

structural: node_id_slider, dynamic,
    position, reference, ref_id_slider, null,
        orientation, reference, global, eye,
        velocity, reference, ref_id_slider, dXP, dYP, dZP,
        angular velocity, reference, ref_id_slider, dWX, dWY, dWZ;

structural: node_id_ground, static,
    position, reference, global, 0., 0., 0.,
        orientation, reference, global, eye,
        velocity, reference, global, null,
        angular velocity, reference, global, null;

end: nodes;

begin: elements;
    module load: "libmodule-autodiff_test.la";
        body: body_id_slider,
                # node
                node_id_slider,
                # mass
                m,
                # relative center of mass
                reference, node, null,
                # inertia matrix
                diag, J11, J22, J33,
                inertial, reference, node, eye;

    joint: joint_id_ground, clamp, node_id_ground, node, node;

    include: "inline_joint_ad_2_elements.elm";

        gravity: 0., 0., -1.,
        const, g;
end: elements;

##############################################################################################################
## Variables to be updated by simple_testsuite.sh --update-reference-test-status
## Warning, do not edit!!!
## @MBDYN_SIMPLE_TESTSUITE_EXIT_STATUS@ = 0
##############################################################################################################

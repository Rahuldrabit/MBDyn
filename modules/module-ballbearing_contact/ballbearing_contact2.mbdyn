/* 
 * MBDyn (C) is a multibody analysis code. 
 * http://www.mbdyn.org
 *
 * Copyright (C) 1996-2023
 *
 * Pierangelo Masarati	<pierangelo.masarati@polimi.it>
 * Paolo Mantegazza	<paolo.mantegazza@polimi.it>
 *
 * Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
 * via La Masa, 34 - 20156 Milano, Italy
 * http://www.aero.polimi.it
 *
 * Changing this copyright notice is forbidden.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation (version 2 of the License).
 * 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 AUTHOR: Reinhard Resch <mbdyn-user@a1.net>
        Copyright (C) 2013(-2023) all rights reserved.

        The copyright of this code is transferred
        to Pierangelo Masarati and Paolo Mantegazza
        for use in the software MBDyn as described
        in the GNU Public License version 2.1
*/

set: real gamma = -pi / 2.;
set: real Phi = -10. * pi / 180.;
set: real Psi = 90 * pi / 180.;
set: real g = 9.81;
set: real R = 100e-3;
set: real rho = 7850;
set: real E1 = 210000e6;
set: real E2 = 210000e6;
set: real m1 = 4./3. * pi * rho * R^3;
set: real Jxx1 = 2./5. * m1 * R^2;
set: real Jyy1 = Jxx1;
set: real Jzz1 = Jxx1;
set: real z1_0 = 0;
set: real z1P_0 = 0;
set: real nu1 = 0.3;
set: real nu2 = 0.3;
set: real mus = 0.5;
set: real muc = 0.4;
set: real delta = 1e-6;
set: real vs = 1e-3;
set: real C0 = 1e300;
set: real initial_time = 0;
set: real final_time = 1;
set: real tau = 1e-10;
set: real max_time_step = 1e-2;
set: real min_time_step = 1e-2;
#set: real output_start_time = initial_time;
#set: real output_time_step = 1e-6;

begin: data;
	problem: initial value; # the default
end: data;

begin: initial value;
	initial time: initial_time;
	final time: final_time;
	time step: min_time_step;
	min time step: min_time_step;
	max time step: max_time_step;
	strategy: factor, 0.8, 1, 1.25, 1, 3, 6;
	linear solver: naive, grad, scale, row max column max, always, max iterations, 10;
    #nonlinear solver: newton raphson;
    method: implicit euler;
    threads: disable;

    nonlinear solver: nox, modified, 200,
        jacobian operator, newton krylov,
        solver, line search based,
        verbose, yes,
        print convergence info, no,
        forcing term, type 2,
        minimum step, 1e-8;
        
	max iterations: 20;
	tolerance: 1e-6, 1e-6;
	derivatives max iterations: 5;
	derivatives tolerance: 1e-6, 1e-6;
        derivatives coefficient: auto;
end: initial value;

begin: control data;
    use automatic differentiation;
    output precision: 16;
    #output meter: closest next, output_start_time, forever, const, output_time_step;
	print: dof stats;
	print: equation description;
	print: dof description;
    print: equation description;
	print: element connection;
	print: node connection;
    rigid bodies: 1;
    structural nodes: 16;
    loadable elements: 1;
    joints: 1;
    gravity;
    default output: all, reference frames;
end: control data;

set: integer node_id_1 = 3001;
set: integer node_id_1_1 = 3011;
set: integer node_id_1_2 = 3012;
set: integer node_id_1_3 = 3013;
set: integer node_id_1_4 = 3014;
set: integer node_id_1_5 = 3015;
set: integer node_id_1_6 = 3016;
set: integer node_id_1_7 = 3017;
set: integer node_id_1_8 = 3018;
set: integer node_id_1_9 = 3019;
set: integer node_id_1_10 = 3020;
set: integer node_id_1_11 = 3021;
set: integer node_id_1_12 = 3022;
set: integer node_id_1_13 = 3023;
set: integer node_id_1_14 = 3024;
set: integer node_id_2 = 3901;
set: integer body_id_1 = 4001;
set: integer joint_id_clamp = 5001;
set: integer elem_id_contact = 6001;
set: integer ref_id_plane = 7001;
set: integer drive_id_startup = 8001;

set: integer drive_id_z_1 = 8002;
set: integer drive_id_z_2 = 8003;
set: integer drive_id_zP_1 = 8004;
set: integer drive_id_zP_2 = 8005;
set: integer drive_id_uP_1 = 8006;
set: integer drive_id_uP_2 = 8007;
set: integer drive_id_tau_1 = 8008;
set: integer drive_id_tau_2 = 8009;

reference: ref_id_plane,
    position, reference, global, R * sin(Phi) * cos(Psi), R * sin(Phi) * sin(Psi), -R * cos(Phi),
    orientation, reference, global, 1, cos(Psi) * cos(Phi), sin(Psi) * cos(Phi), sin(Phi),
                                    2, cos(Psi + pi/2) * cos(Phi), sin(Psi + pi/2) * cos(Phi), 0.,
    velocity, reference, global, null,
    angular velocity, reference, global, null;

begin: nodes;
	structural: node_id_1, dynamic, 
		#absolute position,
			reference,global, 0., 0., z1_0, 
		#absolute orientation matrix,
			reference,global,eye, 
		#absolute velocity,
			reference,global, 0., 0., z1P_0,
		#absolute angular velocity,
			reference,global,null;

    structural: node_id_1_1, dummy, node_id_1, offset,
        reference, node, R, 0., 0.,
        reference, node, eye;

    structural: node_id_1_2, dummy, node_id_1, offset,
        reference, node, 0., R, 0.,
        reference, node, eye;

    structural: node_id_1_3, dummy, node_id_1, offset,
        reference, node, 0., 0., R,
        reference, node, eye;

    structural: node_id_1_4, dummy, node_id_1, offset,
        reference, node, -R, 0., 0.,
        reference, node, eye;

    structural: node_id_1_5, dummy, node_id_1, offset,
        reference, node, 0., -R, 0.,
        reference, node, eye;

    structural: node_id_1_6, dummy, node_id_1, offset,
        reference, node, 0., 0., -R,
        reference, node, eye;

    structural: node_id_1_7, dummy, node_id_1, offset,
        reference, node, R * cos(pi/4.), 0., R * sin(pi/4.),
        reference, node, eye;

    structural: node_id_1_8, dummy, node_id_1, offset,
        reference, node, R * cos(3./4.*pi), 0., R * sin(3./4.*pi),
        reference, node, eye;

    structural: node_id_1_9, dummy, node_id_1, offset,
        reference, node, R * cos(5./4.*pi), 0., R * sin(5./4.*pi),
        reference, node, eye;

    structural: node_id_1_10, dummy, node_id_1, offset,
        reference, node, R * cos(7./4.*pi), 0., R * sin(7./4.*pi),
        reference, node, eye;

    structural: node_id_1_11, dummy, node_id_1, offset,
        reference, node, 0., R * cos(pi/4.), R * sin(pi/4.),
        reference, node, eye;

    structural: node_id_1_12, dummy, node_id_1, offset,
        reference, node, 0., R * cos(3./4.*pi), R * sin(3./4.*pi),
        reference, node, eye;

    structural: node_id_1_13, dummy, node_id_1, offset,
        reference, node, 0., R * cos(5./4.*pi), R * sin(5./4.*pi),
        reference, node, eye;

    structural: node_id_1_14, dummy, node_id_1, offset,
        reference, node, 0., R * cos(7./4.*pi), R * sin(7./4.*pi),
        reference, node, eye;

	structural: node_id_2, static, 
		#absolute position,
			reference,global, null, 
		#absolute orientation matrix,
			reference,global,eye, 
		#absolute velocity,
			reference,global,null,
		#absolute angular velocity,
			reference,global,null;
end: nodes;

begin: elements;
    body: body_id_1,
        node_id_1,
        m1,
        null,
        diag, Jxx1, Jyy1, Jzz1;

	joint: joint_id_clamp, clamp, node_id_2, node, node;


    user defined: elem_id_contact, ball bearing contact, 
        ball, node_id_1,
        ball radius, R,
        washers, 1,
            node_id_2,
            offset, reference, ref_id_plane, null,
            orientation, reference, ref_id_plane, euler123, 0., 0., 30. * pi / 180.,
        elastic modulus ball, E1,
        poisson ratio ball, nu1,
        elastic modulus washer, E2,
        poisson ratio washer, nu2,
        damping factor, 1e-4,
        coulomb friction coefficient, muc,
        static friction coefficient, mus,
        sliding velocity coefficient, vs,
        micro slip stiffness, 1./delta,
        micro slip damping, 1e-1/delta;

        drive caller: drive_id_z_1, element, elem_id_contact, loadable, string, "z1[1]", direct, output, yes;
        drive caller: drive_id_z_2, element, elem_id_contact, loadable, string, "z2[1]", direct, output, yes;
        drive caller: drive_id_zP_1, element, elem_id_contact, loadable, string, "zP1[1]", direct, output, yes;
        drive caller: drive_id_zP_2, element, elem_id_contact, loadable, string, "zP2[1]", direct, output, yes;
        drive caller: drive_id_uP_1, element, elem_id_contact, loadable, string, "uP1[1]", direct, output, yes;
        drive caller: drive_id_uP_2, element, elem_id_contact, loadable, string, "uP2[1]", direct, output, yes;
        #drive caller: drive_id_tau_1, element, elem_id_contact, loadable, string, "tau1[1]", direct, output, yes;
        #drive caller: drive_id_tau_2, element, elem_id_contact, loadable, string, "tau2[1]", direct, output, yes;
        
	drive caller: drive_id_startup, 
        piecewise linear,
            3,
            initial_time,       0,
            initial_time + tau, 1,
            final_time,         1;

	gravity: cos(gamma), 0., sin(gamma),
		mult, 	g, 
			reference, drive_id_startup;

end: elements;


##############################################################################################################
## Variables to be updated by simple_testsuite.sh --update-reference-test-status
## Warning, do not edit!!!
## @MBDYN_SIMPLE_TESTSUITE_EXIT_STATUS@ = 0
##############################################################################################################

# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2023
# 
# Pierangelo Masarati	<pierangelo.masarati@polimi.it>
# Paolo Mantegazza	<paolo.mantegazza@polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# Test model for module-cont-contact.
# It simulates a MASS falling vertically to the GROUND. 
# The contact is modeled with a stiff reaction governed by a force-deformation constitutive law
# This law comprises an Hertzian elastic part and a dissipative part that results in the desired Newtonian coefficient of restitution.
# The body has 4 points of contact, distributed in an X-shaped fashion; it is dropped with a non-zero inclination with respect to the horizontal
#
# Author: Pierangelo Masarati


begin: data;
   problem: initial value;
end: data;


begin: initial value;
	initial time:   0.;
	final time:     1.;
	time step:      1e-4;
	max iterations: 100;
	tolerance:      1.e-4;
end: initial value;


begin: control data;
   structural NODEs: 	+1
   			+1;
   rigid bodies:     	+1;
   joints:           	+1
   			+4;
   gravity;
   default output: none;

   # output results: netcdf, no text;
end: control data;

module load: "libmodule-cont-contact";

#-----------------------------------------------------------------------------
# 	Design Variables

set: const real MASS  	= 1.; 
set: const real HEIGHT 	= 0.1;		# Contact distance from zero
set: const real LENGTH = 0.2;
set: const real WIDTH = 0.1;

#	LABELS
set: const integer NODE_MASS	= 10;
set: const integer NODE_GROUND	= 20;
set: const integer BODY_MASS	= 100;
set: const integer CLAMP      	= 200;
set: const integer DEFDIS 	= 300;

#-----------------------------------------------------------------------------

set: const real PSI = 30.*deg2rad;
set: const real PHI = 5.*deg2rad;

constitutive law: 99, 3, continuous contact, sign, negative, formulation,
	flores,
	# lankarani nikravesh,
	restitution, 0.8, kappa, 2.4e5, exp, 1.5;

reference: NODE_GROUND,
	reference, global, null,
	reference, global, eye,
	reference, global, null,
	reference, global, null;

reference: NODE_MASS + 1,
	reference, NODE_GROUND, 0., 0., HEIGHT,
	reference, NODE_GROUND,
		3, 0., 0., 1.,
		1, cos(PSI), sin(PSI), 0.,
	reference, NODE_GROUND, null,
	reference, NODE_GROUND, null;
reference: NODE_MASS,
	reference, NODE_MASS + 1, null,
	reference, NODE_MASS + 1,
		1, 1., 0., 0.,
		2, 0., cos(PHI), sin(PHI),
	reference, NODE_MASS + 1, null,
	reference, NODE_MASS + 1, null;

begin: nodes;
   structural: NODE_MASS, dynamic, at reference, NODE_MASS;
   structural: NODE_GROUND, static, at reference, NODE_GROUND;
   output: structural, NODE_MASS; 
end: nodes;


begin: elements;
   body: BODY_MASS, NODE_MASS,
	MASS,			# MASS
	null,			# relative center of MASS
	diag, 1e-2, 1e-2, 2e-2;	# inertia matrix
          
   joint: CLAMP,
	clamp,
	NODE_GROUND,
	node,			# absolute position
	node;			# absolute orientation 

  joint: DEFDIS + 1,
	deformable displacement joint,  
	NODE_GROUND,
		position, reference, NODE, null,
	NODE_MASS,
		position, reference, NODE, -LENGTH, -WIDTH, 0.,
	reference, 99;
	# continuous contact, sign, negative, formulation, flores, restitution, 0.8, kappa, 2.4e10, exp, 1.5;

  joint: DEFDIS + 2,
	deformable displacement joint,  
	NODE_GROUND,
		position, reference, NODE, null,
	NODE_MASS,
		position, reference, NODE, LENGTH, -WIDTH, 0.,
	reference, 99;
	# continuous contact, sign, negative, formulation, flores, restitution, 0.8, kappa, 2.4e10, exp, 1.5;

  joint: DEFDIS + 3,
	deformable displacement joint,  
	NODE_GROUND,
		position, reference, NODE, null,
	NODE_MASS,
		position, reference, NODE, LENGTH, WIDTH, 0.,
	reference, 99;
	# continuous contact, sign, negative, formulation, flores, restitution, 0.8, kappa, 2.4e10, exp, 1.5;

  joint: DEFDIS + 4,
	deformable displacement joint,  
	NODE_GROUND,
		position, reference, NODE, null,
	NODE_MASS,
		position, reference, NODE, -LENGTH, WIDTH, 0.,
	reference, 99;
	# continuous contact, sign, negative, formulation, flores, restitution, 0.8, kappa, 2.4e10, exp, 1.5;

   gravity:
	uniform, 0., 0., -1., const, 9.81;
   
   output:
	joint, DEFDIS + 1, DEFDIS + 2, DEFDIS + 3, DEFDIS + 4;
end: elements;

# vim:ft=mbd

##############################################################################################################
## Variables to be updated by simple_testsuite.sh --update-reference-test-status
## Warning, do not edit!!!
## @MBDYN_SIMPLE_TESTSUITE_EXIT_STATUS@ = 0
##############################################################################################################

## MBDyn (C) is a multibody analysis code.
## http://www.mbdyn.org
##
## Copyright (C) 1996-2023
##
## Pierangelo Masarati	<pierangelo.masarati@polimi.it>
## Paolo Mantegazza	<paolo.mantegazza@polimi.it>
##
## Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
## via La Masa, 34 - 20156 Milano, Italy
## http://www.aero.polimi.it
##
## Changing this copyright notice is forbidden.
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation (version 2 of the License).
##
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

## AUTHOR: Reinhard Resch <mbdyn-user@a1.net>
## Copyright (C) 2023(-2023) all rights reserved.

## The copyright of this code is transferred
## to Pierangelo Masarati and Paolo Mantegazza
## for use in the software MBDyn as described
## in the GNU Public License version 2.1

include: "${TRIANGULAR_CONTACT_SET}";

set: real J1 = 2. / 5. * m1 * r1^2;
set: real Phi = atan2(r2, h2);
set: real r = alpha * r2 - r1 * cos(Phi);
set: real z = alpha * h2 + r1 * sin(Phi);
set: real omega = sqrt(g / (r * (r2 / h2)));
set: real omega0 = 0;
set: real omega1 = omega * r / r1;
set: real F0 = m1 * r * omega^2 / cos(Phi);
set: real u0 = F0 / s1;
set: real t1 = 2 * pi * n / abs(omega);

begin: data;
        problem: initial value; # the default
end: data;

begin: initial value;
        initial time: 0;
        final time:  t1;

        time step: 2 * pi / abs(omega) / 10000;

        min time step: 2 * pi / abs(omega) / 100000;
        max time step: 2 * pi / abs(omega) / 10000;
        strategy: factor, 0.75, 1, 1.25, 3, 2, 4;

        max iterations: 100;
        tolerance: 1e-6, test, sepnorm, 1e-6;
        method: bdf;
        derivatives tolerance: 1e-4, 1e-4;
        derivatives max iterations: 10;
        derivatives coefficient: auto;
        linear solver: naive, colamd, scale, iterative, always;
        nonlinear solver: line search, default solver options, heavy nonlinear, divergence check, no;
        threads: disable;
end: initial value;

begin: control data;
       use automatic differentiation;
       rigid body kinematics: const, angular velocity, 0., 0., omega0;
       skip initial joint assembly;
        output meter: closest next, 0, forever, const, 1e-2;
        joints: 1;
        structural nodes: 3;
        rigid bodies: 1;
        loadable elements: 1;
        gravity;
        output precision: 16;
        default output: reference frames;
        print: dof stats;
        print: dof description;
        print: element connection;
        print: node connection;
end: control data;

set: integer ref_id_sphere = 901;
set: integer node_id_cone = 1001;
set: integer node_id_sphere = 1002;
set: integer node_id_sphere_center = 1003;
set: integer joint_id_clamp = 2001;
set: integer body_id_sphere = 3001;
set: integer elem_id_contact = 4001;
set: integer drive_id_Wkin = 5001;
set: integer drive_id_Wpot = 5002;

reference: ref_id_sphere,
           reference, global, r, 0, z,
           reference, global, eye,
           reference, global, 0., (omega - omega0) * r, 0.,
           reference, global, 0., 0., -omega1 / cos(Phi) - omega0;

begin: nodes;
        structural: node_id_cone, static,
                        reference,global, null,
                        reference,global, eye,
                        reference,global, null,
                        reference,global, 0., 0., -omega0;

        structural: node_id_sphere, dynamic,
                    reference, ref_id_sphere, null,
                    reference, ref_id_sphere, eye,
                    reference, ref_id_sphere, null,
                    reference, ref_id_sphere, null;

        structural: node_id_sphere_center, dummy,
                   node_id_sphere, offset,
                   reference, ref_id_sphere, null,
                   reference, ref_id_sphere, eye;
end: nodes;

begin: elements;
        joint: joint_id_clamp, total pin joint, node_id_cone,
               position, reference, global, null,
               position orientation, reference, global, eye,
               rotation orientation, reference, global, eye,
               position, reference, global, null,
               position orientation, reference, global, eye,
               rotation orientation, reference, global, eye,
               position constraint,
                       active,
                       active,
                       active,
                       null,
               orientation constraint,
                       active,
                       active,
                       angular velocity,
                       component,
                       null,
                       null,
                       -omega0;

        body: body_id_sphere,
              node_id_sphere,
              m1,
              reference, ref_id_sphere, null,
              diag, J1, J1, J1,
              inertial, reference, ref_id_sphere, eye;

scalar function: "penalty", multilinear,
          -1., -s1,
          0., 0.,
          1., 0.;

        include: "${TRIANGULAR_CONTACT_ELEM}";

        gravity: uniform, 0., 0., -1., g;

        drive caller: drive_id_Wkin, element, body_id_sphere, body, string, "E", direct, output, yes;
        drive caller: drive_id_Wpot, element, body_id_sphere, body, string, "V", direct, output, yes;
end: elements;

##############################################################################################################
## Variables to be updated by simple_testsuite.sh --update-reference-test-status
## Warning, do not edit!!!
## @MBDYN_SIMPLE_TESTSUITE_EXIT_STATUS@ = 0
##############################################################################################################

% MBDyn (C) is a multibody analysis code. 
% http://www.mbdyn.org
% 
% Copyright (C) 1996-2021
% 
% Pierangelo Masarati	<masarati@aero.polimi.it>
% Paolo Mantegazza	<mantegazza@aero.polimi.it>
% 
% Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
% via La Masa, 34 - 20156 Milano, Italy
% http://www.aero.polimi.it
% 
% Changing this copyright notice is forbidden.
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation (version 2 of the License).
% 
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
% 

BEAM_NBEAMS = 5;
LINK_NBEAMS = 1;
CRANK_NBEAMS = 1;

BEAM_L = 1;
LINK_L = 0.25;
CRANK_L = 0.05;
D = 0.1e-3;

BEAM_EA = 73e6;
BEAM_GAY = 5.025e6;
BEAM_GAZ = 23.40e6;
BEAM_GJ = 877.2;
BEAM_EJY = 60830;
BEAM_EJZ = 608.3;

BEAM_M = 2.68;
BEAM_J22 = 2233e-6;
BEAM_J33 = 22.33e-6;
BEAM_J11 = BEAM_J22 + BEAM_J33;

LINK_EA = 33.02e6;
LINK_GAY = 10.81e6;
LINK_GAZ = 10.81e6;
LINK_GJ = 914.5;
LINK_EJY = 1189;
LINK_EJZ = 1189;

LINK_M = 1.212;
LINK_J22 = 43.65e-6;
LINK_J33 = 43.65e-6;
LINK_J11 = LINK_J22 + LINK_J33;

CRANK_EA = 132.1e6;
CRANK_GAY = 43.22e6;
CRANK_GAZ = 43.22e6;
CRANK_GJ = 14630;
CRANK_EJY = 19020;
CRANK_EJZ = 19020;

CRANK_M = 4.85;
CRANK_J22 = 698.3e-6;
CRANK_J33 = 698.3e-6;
CRANK_J11 = CRANK_J22 + CRANK_J33;

T = 0.4;

fd = fopen('lateralbuckling.set', 'w');
fprintf(fd, '# generated by lateralbuckling_gen.m; do not edit\n');
fprintf(fd, '\n');

fprintf(fd, 'set: const integer N_BEAM_NODES = %d;\n', 2*BEAM_NBEAMS + 1 + 2*LINK_NBEAMS + 1 + 2*CRANK_NBEAMS + 1);
fprintf(fd, 'set: const integer N_BEAMS = %d;\n', BEAM_NBEAMS + LINK_NBEAMS + CRANK_NBEAMS);

fprintf(fd, '\n');

fprintf(fd, 'set: const integer POINT_R = %d;\n', 100);
fprintf(fd, 'set: const integer POINT_T = %d;\n', 200);
fprintf(fd, 'set: const integer POINT_C = %d;\n', 300);
fprintf(fd, 'set: const integer POINT_B = %d;\n', 400);
fprintf(fd, 'set: const integer POINT_G = %d;\n', 500);

fprintf(fd, '\n');

fprintf(fd, 'set: const integer BEAM = %d;\n', 1000);
fprintf(fd, 'set: const integer LINK = %d;\n', 2000);
fprintf(fd, 'set: const integer CRANK = %d;\n', 3000);

fprintf(fd, '\n');

fprintf(fd, 'set: const integer BEAM_POINT_R = BEAM;\n');
fprintf(fd, 'set: const integer BEAM_POINT_T = BEAM_POINT_R + %d;\n', 2*BEAM_NBEAMS);
fprintf(fd, 'set: const integer LINK_POINT_C = LINK;\n');
fprintf(fd, 'set: const integer LINK_POINT_B = LINK_POINT_C + %d;\n', 2*LINK_NBEAMS);
fprintf(fd, 'set: const integer CRANK_POINT_B = CRANK;\n');
fprintf(fd, 'set: const integer CRANK_POINT_G = CRANK_POINT_B + %d;\n', 2*CRANK_NBEAMS);

fprintf(fd, '\n');

fprintf(fd, 'set: const real D = %+16.8e; # m\n', D);

fprintf(fd, '\n');

fprintf(fd, 'set: const real BEAM_L = %+16.8e; # m\n', BEAM_L);

fprintf(fd, 'set: const real BEAM_EA = %+16.8e; # N\n', BEAM_EA);
fprintf(fd, 'set: const real BEAM_GAY = %+16.8e; # N\n', BEAM_GAY);
fprintf(fd, 'set: const real BEAM_GAZ = %+16.8e; # N\n', BEAM_GAZ);
fprintf(fd, 'set: const real BEAM_GJ = %+16.8e; # N m^2\n', BEAM_GJ);
fprintf(fd, 'set: const real BEAM_EJY = %+16.8e; # N m^2\n', BEAM_EJY);
fprintf(fd, 'set: const real BEAM_EJZ = %+16.8e; # N m^2\n', BEAM_EJZ);

fprintf(fd, 'set: const real BEAM_M = %+16.8e; # kg/m\n', BEAM_M);
fprintf(fd, 'set: const real BEAM_J11 = %+16.8e; # kg m^2/m\n', BEAM_J11);
fprintf(fd, 'set: const real BEAM_J22 = %+16.8e; # kg m^2/m\n', BEAM_J22);
fprintf(fd, 'set: const real BEAM_J33 = %+16.8e; # kg m^2/m\n', BEAM_J33);

fprintf(fd, '\n');

fprintf(fd, 'set: const real LINK_L = %+16.8e;\n', LINK_L);

fprintf(fd, 'set: const real LINK_EA = %+16.8e;\n', LINK_EA);
fprintf(fd, 'set: const real LINK_GAY = %+16.8e;\n', LINK_GAY);
fprintf(fd, 'set: const real LINK_GAZ = %+16.8e;\n', LINK_GAZ);
fprintf(fd, 'set: const real LINK_GJ = %+16.8e;\n', LINK_GJ);
fprintf(fd, 'set: const real LINK_EJY = %+16.8e;\n', LINK_EJY);
fprintf(fd, 'set: const real LINK_EJZ = %+16.8e;\n', LINK_EJZ);

fprintf(fd, 'set: const real LINK_M = %+16.8e;\n', LINK_M);
fprintf(fd, 'set: const real LINK_J11 = %+16.8e;\n', LINK_J11);
fprintf(fd, 'set: const real LINK_J22 = %+16.8e;\n', LINK_J22);
fprintf(fd, 'set: const real LINK_J33 = %+16.8e;\n', LINK_J33);

fprintf(fd, '\n');

fprintf(fd, 'set: const real CRANK_L = %+16.8e;\n', CRANK_L);

fprintf(fd, 'set: const real CRANK_EA = %+16.8e;\n', CRANK_EA);
fprintf(fd, 'set: const real CRANK_GAY = %+16.8e;\n', CRANK_GAY);
fprintf(fd, 'set: const real CRANK_GAZ = %+16.8e;\n', CRANK_GAZ);
fprintf(fd, 'set: const real CRANK_GJ = %+16.8e;\n', CRANK_GJ);
fprintf(fd, 'set: const real CRANK_EJY = %+16.8e;\n', CRANK_EJY);
fprintf(fd, 'set: const real CRANK_EJZ = %+16.8e;\n', CRANK_EJZ);

fprintf(fd, 'set: const real CRANK_M = %+16.8e;\n', CRANK_M);
fprintf(fd, 'set: const real CRANK_J11 = %+16.8e;\n', CRANK_J11);
fprintf(fd, 'set: const real CRANK_J22 = %+16.8e;\n', CRANK_J22);
fprintf(fd, 'set: const real CRANK_J33 = %+16.8e;\n', CRANK_J33);

fprintf(fd, '\n');

fprintf(fd, 'set: real DAMPING_FACTOR = 0; # s\n');

fprintf(fd, '\n');

fprintf(fd, 'set: real T = %+16.8e; # s\n', T);

fclose(fd);


fd = fopen('lateralbuckling.ref', 'w');
fprintf(fd, '# generated by lateralbuckling_gen.m; do not edit\n');

fprintf(fd, '\n');
fprintf(fd, '# point R, ground hinge of beam\n');
fprintf(fd, 'reference: POINT_R,\n');
fprintf(fd, '\treference, global, null,\n');
fprintf(fd, '\treference, global, eye,\n');
fprintf(fd, '\treference, global, null,\n');
fprintf(fd, '\treference, global, null;\n');

fprintf(fd, '\n');
fprintf(fd, '# point T, tip of beam\n');
fprintf(fd, 'reference: POINT_T,\n');
fprintf(fd, '\treference, POINT_R, BEAM_L, 0., 0.,\n');
fprintf(fd, '\treference, POINT_R, eye,\n');
fprintf(fd, '\treference, POINT_R, null,\n');
fprintf(fd, '\treference, POINT_R, null;\n');

fprintf(fd, '\n');
fprintf(fd, '# point C, connection between beam and link\n');
fprintf(fd, 'reference: POINT_C,\n');
fprintf(fd, '\treference, POINT_T, 0., D, 0.,\n');
fprintf(fd, '\treference, POINT_T, eye,\n');
fprintf(fd, '\treference, POINT_T, null,\n');
fprintf(fd, '\treference, POINT_T, null;\n');

fprintf(fd, '\n');
fprintf(fd, '# point B, connection betweem link and crank\n');
fprintf(fd, 'reference: POINT_B,\n');
fprintf(fd, '\treference, POINT_C, 0., 0., -LINK_L,\n');
fprintf(fd, '\treference, POINT_C, eye,\n');
fprintf(fd, '\treference, POINT_C, null,\n');
fprintf(fd, '\treference, POINT_C, null;\n');

fprintf(fd, '\n');
fprintf(fd, '# point G, ground hinge of crank\n');
fprintf(fd, 'reference: POINT_G,\n');
fprintf(fd, '\treference, POINT_B, -CRANK_L, 0., 0.,\n');
fprintf(fd, '\treference, POINT_B, eye,\n');
fprintf(fd, '\treference, POINT_B, null,\n');
fprintf(fd, '\treference, POINT_B, null;\n');

fprintf(fd, '\n');
fprintf(fd, '# beam\n');
fprintf(fd, 'reference: BEAM,\n');
fprintf(fd, '\treference, POINT_R, null,\n');
fprintf(fd, '\treference, POINT_R, eye,\n');
fprintf(fd, '\treference, POINT_R, null,\n');
fprintf(fd, '\treference, POINT_R, null;\n');

fprintf(fd, '\n');
fprintf(fd, '# link\n');
fprintf(fd, 'reference: LINK,\n');
fprintf(fd, '\treference, POINT_C, null,\n');
fprintf(fd, '\treference, POINT_C, 1, 0., 0., -1., 2, 0., 1., 0.,\n');
fprintf(fd, '\treference, POINT_C, null,\n');
fprintf(fd, '\treference, POINT_C, null;\n');

fprintf(fd, '\n');
fprintf(fd, '# link\n');
fprintf(fd, 'reference: CRANK,\n');
fprintf(fd, '\treference, POINT_B, null,\n');
fprintf(fd, '\treference, POINT_B, 1, -1., 0., 0., 2, 0., 1., 0.,\n');
fprintf(fd, '\treference, POINT_B, null,\n');
fprintf(fd, '\treference, POINT_B, null;\n');

fclose(fd);


fd = fopen('lateralbuckling.nod', 'w');
fprintf(fd, '# generated by lateralbuckling_gen.m; do not edit\n');
fprintf(fd, '\n');

DL = BEAM_L/(2*BEAM_NBEAMS);
for i = 0:2*BEAM_NBEAMS,
	fprintf(fd, 'structural: BEAM + %d, dynamic,\n', i);
	fprintf(fd, '\treference, BEAM, %+16.8e,%+16.8e,%+16.8e,\n', i*DL, 0., 0.);
	fprintf(fd, '\treference, BEAM, eye,\n');
	fprintf(fd, '\treference, BEAM, null,\n');
	fprintf(fd, '\treference, BEAM, null;\n');
end

DL = LINK_L/(2*LINK_NBEAMS);
for i = 0:2*LINK_NBEAMS,
	fprintf(fd, 'structural: LINK + %d, dynamic,\n', i);
	fprintf(fd, '\treference, LINK, %+16.8e,%+16.8e,%+16.8e,\n', i*DL, 0., 0.);
	fprintf(fd, '\treference, LINK, eye,\n');
	fprintf(fd, '\treference, LINK, null,\n');
	fprintf(fd, '\treference, LINK, null;\n');
end

DL = CRANK_L/(2*CRANK_NBEAMS);
for i = 0:2*CRANK_NBEAMS,
	fprintf(fd, 'structural: CRANK + %d, dynamic,\n', i);
	fprintf(fd, '\treference, CRANK, %+16.8e,%+16.8e,%+16.8e,\n', i*DL, 0., 0.);
	fprintf(fd, '\treference, CRANK, eye,\n');
	fprintf(fd, '\treference, CRANK, null,\n');
	fprintf(fd, '\treference, CRANK, null;\n');
end

fclose(fd);


fd = fopen('lateralbuckling.elm', 'w');
fprintf(fd, '# generated by lateralbuckling_gen.m; do not edit\n');
fprintf(fd, '\n');


for j = 1:3,
	if (j == 1),
		label = 'BEAM';
		nbeams = BEAM_NBEAMS;
	elseif (j == 2),
		label = 'LINK';
		nbeams = LINK_NBEAMS;
	elseif (j == 3),
		label = 'CRANK';
		nbeams = CRANK_NBEAMS;
	end

	for i = 0:2*nbeams,
		if (i == 0),
			DMF = 1/2;
			CMF = 1/4;
			J1F = 1/2;
			J2F = 1/2;
			J3F = 1/2;

		elseif (i == 2*nbeams),
			DMF = 1/2;
			CMF = -1/4;
			J1F = 1/2;
			J2F = 1/2;
			J3F = 1/2;
		else
			DMF = 1;
			CMF = 0;
			J1F = 1;
			J2F = 1;
			J3F = 1;
		end
		fprintf(fd, 'body: %s + %d, %s + %d,\n', label, i, label, i);
		fprintf(fd, '\t%f*%s_M*%s_L/(2*%d),\n', DMF, label, label, nbeams);
		fprintf(fd, '\treference, node, %f*%s_L/(2*%d), 0., 0.,\n', CMF, label, nbeams);
		fprintf(fd, '\tdiag,\n');
		fprintf(fd, '\t\t%f*%s_J11*%s_L/(2*%d),\n', J1F, label, label, nbeams);
		fprintf(fd, '\t\t%f*%s_J22*%s_L/(2*%d) + (%f*%s_M/12)*(%f*%s_L/(2*%d))^3,\n', ...
			J2F, label, label, nbeams, DMF, label, DMF, label, nbeams);
		fprintf(fd, '\t\t%f*%s_J33*%s_L/(2*%d) + (%f*%s_M/12)*(%f*%s_L/(2*%d))^3;\n', ...
			J3F, label, label, nbeams, DMF, label, DMF, label, nbeams);
	end
	fprintf(fd, '\n');

	fprintf(fd, 'constitutive law: %s, 6, linear viscoelastic generic, diag,\n', label);
	fprintf(fd, '\t%s_EA, %s_GAY, %s_GAZ, %s_GJ, %s_EJY, %s_EJZ,\n', ...
		label, label, label, label, label, label);
	fprintf(fd, '\tproportional, DAMPING_FACTOR;\n');
	fprintf(fd, '\n');
	for i = 1:nbeams,
		fprintf(fd, 'beam3: %s + %d,\n', label, i);
		fprintf(fd, '\t%s + %d, position, reference, node, null,\n', label, 2*i - 2)
		fprintf(fd, '\t%s + %d, position, reference, node, null,\n', label, 2*i - 1)
		fprintf(fd, '\t%s + %d, position, reference, node, null,\n', label, 2*i - 0)
		fprintf(fd, '\treference, %s, eye,\n', label);
		fprintf(fd, '\treference, %s,\n', label);
		fprintf(fd, '\tsame,\n');
		fprintf(fd, '\tsame;\n');
	end
	fprintf(fd, '\n');
end

fclose(fd);

% MBDyn (C) is a multibody analysis code. 
% http://www.mbdyn.org
% 
% Copyright (C) 1996-2017
% 
% Pierangelo Masarati	<masarati@aero.polimi.it>
% Paolo Mantegazza	<mantegazza@aero.polimi.it>
% 
% Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
% via La Masa, 34 - 20156 Milano, Italy
% http://www.aero.polimi.it
% 
% Changing this copyright notice is forbidden.
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation (version 2 of the License).
% 
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
% 

NBEAMS = 5;

E = 70e9;
nu = 0.3;
G = E/(2*(1 + nu));
L = 0.508;
a = 3.175e-3;
b = 12.7e-3;

%EA = E*a*b;
%GAY = G*a*b; % FIXME
%GAZ = G*a*b; % FIXME
%GJ = G*a^2*b^2; % FIXME
%EJY = E*a^3*b/12;
%EJZ = E*a*b^3/12;

% From PrincetonBeamDescription.pdf
%EA = 2.84e6;
%EJY = 2.43;
%EJZ = 36.28;
%GJ = 3.10;
%GAY = 0.90e6;
%GAZ = 0.64e6;

EA = 2.84191e+006;
EJY = 3.62794e+001;
EJZ = 2.42873e+000;
GJ = 3.10338e+000;
GAY = 6.40131e+005;
GAZ = 9.03881e+005;

fd = fopen('princeton.set', 'w');
fprintf(fd, '# generated by princeton_gen.m; do not edit\n');
fprintf(fd, '\n');

fprintf(fd, 'set: const integer N_BEAM_NODES = %d;\n', 2*NBEAMS);
fprintf(fd, 'set: const integer N_BEAMS = %d;\n', NBEAMS);

fprintf(fd, '\n');

fprintf(fd, 'set: ifndef real THETA = 0.;\n');
fprintf(fd, 'set: const real P1 = 4.448;\n');
fprintf(fd, 'set: const real P2 = 8.896;\n');
fprintf(fd, 'set: const real P3 = 13.345;\n');
fprintf(fd, 'set: ifndef real P = P1;\n');

fprintf(fd, '\n');

fprintf(fd, 'set: const real L = %+16.8e;\n', L);
fprintf(fd, 'set: const real EA = %+16.8e;\n', EA);
fprintf(fd, 'set: const real GAY = %+16.8e;\n', GAY);
fprintf(fd, 'set: const real GAZ = %+16.8e;\n', GAZ);
fprintf(fd, 'set: const real GJ = %+16.8e;\n', GJ);
fprintf(fd, 'set: const real EJY = %+16.8e;\n', EJY);
fprintf(fd, 'set: const real EJZ = %+16.8e;\n', EJZ);

fclose(fd);


fd = fopen('princeton.ref', 'w');
fprintf(fd, '# generated by princeton_gen.m; do not edit\n');
fprintf(fd, '\n');

fprintf(fd, 'reference: 1,\n');
fprintf(fd, '\treference, global, null,\n');
fprintf(fd, '\treference, global,\n');
fprintf(fd, '\t\t1, 1., 0., 0.,\n');
fprintf(fd, '#\t\t2, 0., cos(THETA*deg2rad), sin(THETA*deg2rad),\n');
fprintf(fd, '\t\t2, 0., 1., 0.,\n');
fprintf(fd, '\treference, global, null,\n');
fprintf(fd, '\treference, global, null;\n');


fclose(fd);


fd = fopen('princeton.nod', 'w');
fprintf(fd, '# generated by princeton_gen.m; do not edit\n');
fprintf(fd, '\n');

DL = L/(2*NBEAMS);
for i = 1:2*NBEAMS,
	fprintf(fd, 'structural: %d, static,\n', i);
	fprintf(fd, '\treference, 1, %+16.8e,%+16.8e,%+16.8e,\n', i*DL, 0., 0.);
	fprintf(fd, '\treference, 1, eye,\n');
	fprintf(fd, '\treference, 1, null,\n');
	fprintf(fd, '\treference, 1, null;\n');
end

fclose(fd);


fd = fopen('princeton.elm', 'w');
fprintf(fd, '# generated by princeton_gen.m; do not edit\n');
fprintf(fd, '\n');

fprintf(fd, 'constitutive law: 1, 6,\n');
fprintf(fd, '\tlinear elastic generic, diag, EA, GAY, GAZ, GJ, EJY, EJZ;\n');
fprintf(fd, '\n');

for i = 1:NBEAMS,
	fprintf(fd, 'beam3: %d,\n', i);
	fprintf(fd, '\t%d, reference, node, null,\n', 2*i - 2)
	fprintf(fd, '\t%d, reference, node, null,\n', 2*i - 1)
	fprintf(fd, '\t%d, reference, node, null,\n', 2*i - 0)
	fprintf(fd, '\treference, 1, eye,\n');
	fprintf(fd, '\treference, 1,\n');
	fprintf(fd, '\tsame,\n');
	fprintf(fd, '\tsame;\n');
end

fclose(fd);

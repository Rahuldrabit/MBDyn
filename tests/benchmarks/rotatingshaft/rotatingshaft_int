# $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/benchmarks/rotatingshaft/rotatingshaft,v 1.3 2015/06/25 18:48:56 masarati Exp $
#
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2021
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

begin: data;
	problem: initial value;
end: data;

include: "rotatingshaft_m.set";

set: real TG = -1;

begin: initial value;
	initial time: TG;
	final time: 2.*T3;

	# time step: 1e-4;	# 1e-4 for ms/ms3/ms4/ss2/ss3/ss4, 2e-4 for Bathe, 3e-4 for msstc3/mssth3/dirk33, 4e-4 for msstc4/mssth4/dirk43, 5e-4 for msstc5/mssth5/dirk54 (to keep comparable costs).
	time step: 5e-3;	# 1e-3 for ms/ms3/ms4/ss2/ss3/ss4, 2e-3 for Bathe, 3e-3 for msstc3/mssth3/dirk33, 4e-3 for msstc4/mssth4/dirk43, 5e-3 for msstc5/mssth5/dirk54 (to keep comparable costs).

	# method: bdf;		# LMS2, rho=0.0;
	# method: ms, 0.6;	# LMS2, rho=0.6;
	# method: ms3, 0.0;	# LMS3, rho=0.0;
	# method: ms3, 0.6;	# LMS3, rho=0.6;
	# method: ms4, 0.0;	# LMS4, rho=0.0;
	# method: ms4, 0.6;	# LMS4, rho=0.6;	# does not converge with dt=1e-3;
	# method: ss2, 0.0;	# SS2, rho=0.0;
	# method: ss2, 0.6;	# SS2, rho=0.6;
	# method: ss3, 0.0;	# SS3, rho=0.0;
	# method: ss3, 0.6;	# SS3, rho=0.6;
	# method: ss4, 0.0;	# SS4, rho=0.0;
	# method: ss4, 0.6;	# SS4, rho=0.6;		
	# method: Bathe, 0.0;	# Bathe, rho=0.0;
	# method: Bathe, 0.6;	# Bathe, rho=0.6;
	# method: msstc3, 0.0;	# MSSTC(3), rho=0.0;
	# method: msstc3, 0.6;	# MSSTC(3), rho=0.6;
	# method: msstc4, 0.0;	# MSSTC(4), rho=0.0;
	# method: msstc4, 0.6;	# MSSTC(4), rho=0.6;
	# method: msstc5, 0.0;	# MSSTC(5), rho=0.0;
	# method: msstc5, 0.6;	# MSSTC(5), rho=0.6;
	# method: mssth3, 0.0;	# MSSTH(3), rho=0.0;
	# method: mssth4, 0.0;	# MSSTH(4), rho=0.0;
	# method: mssth5, 0.0;	# MSSTH(5), rho=0.0;	
	# method: dirk33;	# ESDIRK3(2)4L[2]SA;
	# method: dirk43;	# ESDIRK3(3)5L[2]SA;
	method: dirk54;		# ESDIRK4(3)6L[2]SA_2;


	tolerance: 1e-4;
	max iterations: 50;

	linear solver: naive, colamd;
	# linear solver: umfpack, cc;
	# nonlinear solver: newton raphson, modified, 5;

	# output: iterations;
	# output: residual;
	# output: solution;

	# eigenanalysis: TG, use lapack, output eigenvectors, output geometry, upper frequency limit, 500, lower frequency limit, 1;
threads: disable;
end: initial value;

begin: control data;
	# default orientation: orientation vector;
	# default orientation: orientation matrix;
	# default output: reference frames;

	structural nodes: 1 + N_NODES;
	rigid bodies: N_NODES;
	beams: N_BEAMS;
	joints: 2 + 2;
	gravity;
end: control data;

include: "rotatingshaft_m.ref";

begin: nodes;
	structural: 999, static,
		reference, SHAFT_R, null,
		reference, SHAFT_R, eye,
		reference, SHAFT_R, null,
		reference, SHAFT_R, null;

	include: "rotatingshaft_m.nod";
end: nodes;

begin: elements;
	joint: 999, clamp, 999, node, node;

	driven: 998,
		string, "Time < TG/4",
		# string, "(Time > TG+.01) && (Time < TG/4)",
	joint: 998, rod,
		999,
			position, reference, SHAFT_R, L/2, 0., -1.,
		N_BEAMS,
			position, reference, SHAFT_R, L/2, 0., 0.,
		from nodes,
		linear viscous isotropic, 1e4;
			

	joint: SHAFT_R, total joint,
		999,
			position, reference, SHAFT_R, null,
			position orientation, reference, SHAFT_R, eye,
			rotation orientation, reference, SHAFT_R, eye,
		SHAFT_R,
			position, reference, SHAFT_R, null,
			position orientation, reference, SHAFT_R, eye,
			rotation orientation, reference, SHAFT_R, eye,
		position constraint, 1, 1, 1, null,
		orientation constraint, angular velocity, 1, 1,
			1., 0., 0.,
				# const, 0.;
				array, 2,
					cosine, T0, pi/T1, A1*OMEGA/2, half, 0.,
					cosine, T2, pi/(T3 - T2), (A2 - A1)*OMEGA/2, half, 0.;

	joint: SHAFT_T, total joint,
		999,
			position, reference, SHAFT_T, null,
			position orientation, reference, SHAFT_T, eye,
			rotation orientation, reference, SHAFT_T, eye,
		SHAFT_T,
			position, reference, SHAFT_T, null,
			position orientation, reference, SHAFT_T, eye,
			rotation orientation, reference, SHAFT_T, eye,
		position constraint, 0, 1, 1, null,
		orientation constraint, 0, 1, 1, null;

	include: "rotatingshaft_m.elm";
	
	gravity: 0., 0., -1,
		# const, 9.81;
		cosine, TG, pi/(-TG/2), 9.81/2, half, 0.;
end: elements;

##############################################################################################################
## Variables to be updated by simple_testsuite.sh --update-reference-test-status
## Warning, do not edit!!!
## @MBDYN_SIMPLE_TESTSUITE_EXIT_STATUS@ = 0
##############################################################################################################

# $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/forces/strext/socket/simplerotor/mapping/README,v 1.7 2017/01/12 15:02:57 masarati Exp $
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2017
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Author: Giuseppe Quaranta <quaranta@aero.polimi.it>
#
#######################################################################
# 
# 1) run with "octave"
#       makegrid 
#
#    to create the basic blade grid; it generates the file "basicgrid.dat",
#    containing the mesh of the interface of the external domain
#
# 2) edit file "simplerotor2_mapping"
# 	uncomment the "echo" line in the first external structural mapping
#       element
# 
# 3) run 
#       mbdyn -f simplerotor2_mapping
#
#    it generates the file "blade1.dat", containing the mesh of the 
#    interface of the multibody domain
#
#    the model in simplerotor2_mapping includes files generated by
#    simplerotor_blade.m, which are supposed to be in this directory's
#    parent directory; make sure it has been executed before running
#    mbdyn
#
# 5) run with "octave" 
# 	create_mls_interface("blade1.dat")    
#
#    it generates the file "blade1H.dat", containing the mapping between
#    the two models
#
# 6) edit file simplerotor2_mapping
# 	comment the "echo" line in the first external mapping element
# 
# 7) run
#       simplerotor2_mapping.sh
#
#    it will execute mbdyn and two instances of test_strext_socket
#    that interact using the mapping generated by the previous steps
#    it expects mbdyn and test_strext_socket to be in $PATH
#    the two instances of test_strext_socket generate the files
#    "blade1.mov" and "blade2.mov", containing the motion sent by mbdyn
#
# 8) postprocessing of the movement
#	run with "matlab" (octave does not allow patch plotting :( ) 
#	# for blade 1 
#	[Pos, Vel] = plot_grid("basicgrid.dat", "blade1.mov", N)
#	# for blade 2 
#	[Pos, Vel] = plot_grid("basicgrid.dat", "blade2.mov", N)
#	
#    where N is the number of steps between two subsequent plots
#
# Notes:
#
# In this case the two grid are identical so the same interface operator is used
# by both external structural mapping elements. So the MLS code is run only once
# and the interface operator saved in blade1H.dat is used for both blades.
#
# If you like to send forces read from an input file run the octave script
# create_forces.m and pass the file "bladeforce.dat" to test_strext_socket
# using the '-i' switch.


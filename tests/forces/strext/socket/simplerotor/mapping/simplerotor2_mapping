# $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/forces/strext/socket/simplerotor/mapping/simplerotor2_mapping,v 1.7 2017/01/12 15:02:57 masarati Exp $
#
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2017
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# Author: Giuseppe Quaranta <quaranta@aero.polimi.it>

begin: data;
	problem: initial value;
end: data;

include: "../simplerotor_blade_m.set";
set: OMEGA = 40.;

begin: initial value;
	initial time: 0.;
	final time: 3*(2*pi)/OMEGA;
	time step: (2*pi)/OMEGA/60;

	method: ms, .6;
	linear solver: naive, colamd;
	nonlinear solver: newton raphson, modified, 5;

	tolerance: 1e-5;
	max iterations: 50;

	output: iterations;
	# output: residual;
threads: disable;
end: initial value;

set: const integer GROUND = 0;
set: const integer HUB = 1000;


set: BLADE_COLLECTIVE = 8.*deg2rad;

begin: control data;
	structural nodes:
		+1				# ground
		+1				# hub
		+2*(
			+BLADE_NNODES		# cantilever blade
			+ 1 			# dummy reference node
		);

	rigid bodies:
		+2*(
			+BLADE_NBODIES		# cantilever blade
		);
	joints:
		+1				# ground clamp
		+1				# rotor motion
		+2*(
			+1			# pitch control
		)
	;
	beams:
		+2*(
			+BLADE_NBEAMS		# cantilever blade
		);
	forces:
		+2				# external aerodynamics
	;
end: control data;

reference: GROUND,
	reference, global, null,
	reference, global, eye,
	reference, global, null,
	reference, global, null;

reference: HUB,
	reference, GROUND, null,
	reference, GROUND, eye,
	reference, GROUND, null,
	reference, GROUND, 0., 0., OMEGA;

set: CURR_BLADE = BLADE_1;
include: "../simplerotor_blade_m.ref";
set: CURR_BLADE = BLADE_2;
include: "../simplerotor_blade_m.ref";

begin: nodes;
	structural: GROUND, static,
		reference, GROUND, null,
		reference, GROUND, eye,
		reference, GROUND, null,
		reference, GROUND, null;

	structural: HUB, static,
		reference, HUB, null,
		reference, HUB, eye,
		reference, HUB, null,
		reference, HUB, null;

	set: CURR_BLADE = BLADE_1;
	include: "../simplerotor_blade_m.nod";
	structural: CURR_BLADE, dummy, CURR_BLADE + 1, offset, 0., -BLADE_CUTOUT, 0.,
        	reference, CURR_BLADE, eye;
	set: CURR_BLADE = BLADE_2;
	include: "../simplerotor_blade_m.nod";
	structural: CURR_BLADE, dummy, CURR_BLADE + 1, offset, 0., -BLADE_CUTOUT, 0.,
        	reference, CURR_BLADE, eye;
end: nodes;

begin: elements;
	joint: GROUND, clamp, GROUND, node, node;

	joint: HUB, total joint,
		GROUND,
		HUB,
		position constraint, active, active, active, null,
		orientation constraint, active, active, active,
			0., 0., 1., linear, 0., OMEGA;

	set: CURR_BLADE = BLADE_1;
	include: "../simplerotor_blade_m.elm";
	set: CURR_BLADE = BLADE_2;
	include: "../simplerotor_blade_m.elm";

	set: real da = .01;
	set: CURR_BLADE = BLADE_1;

	force: CURR_BLADE, external structural mapping,
		socket,
		create, yes,
		path, "/tmp/mbdyn1.sock",
		no signal,
		coupling,
			# loose,
			tight,
		reference node, CURR_BLADE,
		# orientation, orientation vector,
		use reference node forces, no,
		points number, 3 * BLADE_NNODES,
			CURR_BLADE +  1, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  2, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  3, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  4,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  5,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  6, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  7, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  8, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  9, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 10,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 11, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 12, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 13, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 14,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 15,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 16, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 17, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 18, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 19, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 20,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
		# echo, "blade1.dat", surface, "basicgrid.dat", output, "blade1H.dat", order, 2, basenode, 12, weight, 2, stop;
		mapped points number, 231,
		sparse mapping file, "blade1H.dat";

	set: CURR_BLADE = BLADE_2;

	force: CURR_BLADE, external structural mapping,
		socket,
		create, yes,
		path, "/tmp/mbdyn2.sock",
		no signal,
		coupling,
			# loose,
			tight,
		reference node, CURR_BLADE,
		# orientation, orientation vector,
		use reference node forces, no,
		points number, 3 * BLADE_NNODES,
			CURR_BLADE +  1, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  2, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  3, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  4,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  5,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  6, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  7, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  8, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE +  9, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 10,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 11, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 12, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 13, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 14,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 15,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 16, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 17, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 18, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 19, 
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
			CURR_BLADE + 20,
				offset, null,
				offset, 0., 0., da,
				offset, da, 0., 0.,
		# echo, "blade2.dat", surface, "basicgrid.dat", output, "blade2H.dat", order, 2, basenode, 12, weight, 2;
		mapped points number, 231,
		sparse mapping file, "blade1H.dat";

end: elements;

# vim:ft=mbd

##############################################################################################################
## Variables to be updated by simple_testsuite.sh --update-reference-test-status
## Warning, do not edit!!!
## @MBDYN_SIMPLE_TESTSUITE_EXIT_STATUS@ = 0
##############################################################################################################

## @MBDYN_SIMPLE_TESTSUITE_EXCLUDE@ = 1

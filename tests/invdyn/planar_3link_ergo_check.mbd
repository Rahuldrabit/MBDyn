# $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/invdyn/planar_3link_ergo_check.mbd,v 1.7 2017/01/12 15:03:28 masarati Exp $
#
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2017
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# Original Author: Andrea Zanoni
# Modified for inverse dynamics by: Pierangelo Masarati <masarati@aero.polimi.it>

begin: data;
	problem: initial value;
end: data;

set: const real A = .4/2;
set: const real W = pi;
set: const real T0 = .01;

begin: initial value;
	initial time: 0.;
	final time: T0 + 2*pi/W;
	time step: 1.e-2;
	tolerance: 1e-5;
	max iterations: 100;
	# derivatives tolerance: 1e9;
	threads: 1;
	# linear solver: umfpack, cc;
	linear solver: umfpack;
	output: iterations;
 	# output: residual;
 	# output: solution;
 	# output: jacobian;

	# abort after: input;
threads: disable;
end: initial value;

begin: control data;
	structural nodes:
			+1 	# Ground
			+1	# Link 1
			+1	# Link 2
			+1	# Link 3
	;
	rigid bodies:
			+1	# Link 1
			+1	# Link 2
			+1	# Link 3
	;
	joints:
			+1	# Ground clamp
			+1	# Revolute 1
			+1	# Revolute 2
			+1	# Revolute 3
			+1	# spring
	;
	file drivers: 3;
	forces: 3;
 
	print: equation description;
   	default orientation: orientation vector;
	default output: accelerations;
	output precision: 16;
end: control data;

set: integer ground = 1;

reference: ground,
	null,
	eye,
	null,
	null;

reference: 20,
	reference, ground, null,
	reference, ground, euler, 0., 0., pi/6.,
	null,
	null;

reference: 25,
	reference, 20, 0.16, 0., 0., 
	reference, 20, eye,
	null,
	null;

reference: 30,
	reference, 20, 0.32, 0., 0.,
	reference, 20, euler, 0., 0., pi/6.,
	null,
	null;

reference: 35,
	reference, 30, 0.16, 0., 0., 
	reference, 30, eye,
	null,
	null;

reference: 40,
	reference, 30, 0.32, 0., 0., 
	reference, 30, euler, 0., 0., pi/6.,
	null,
	null;

reference: 45,
	reference, 40, 0.16, 0., 0., 
	reference, 40, eye,
	null,
	null;

reference: 50,
	reference, 40, 0.32, 0., 0., 
	reference, 40, eye,
	null,
	null;

/*reference: 1000,
	reference, ground, 0.16*sqrt(3.), 0.48, 0.,
	reference, 20, eye,
	null,
	null;*/

begin: nodes;
	structural: 1, static,
	null,
	eye,
	null,
	null;

	structural: 2, dynamic,
	reference, 25, null,
	reference, 25, eye,
	null,
	null;

	structural: 3, dynamic,
	reference, 35, null,
	reference, 35, eye,
	null,
	null;
	
	structural: 4, dynamic,
	reference, 45, null,
	reference, 45, eye,
	null,
	null;

end: nodes;

begin: drivers;
	file: 1, fixed step, 
		count,
		3,
		initial time, 0.,
		time step, 1e-2,
		pad zeros, no,
		"z_c.dat";
	file: 2, fixed step, 
		count,
		3,
		initial time, 0.,
		time step, 1e-2,
		pad zeros, no,
		"z_t.dat";
	file: 3, fixed step, 
		count,
		3,
		initial time, 0.,
		time step, 1e-2,
		pad zeros, no,
		"z_w.dat";
end: drivers;

set: real K1 = 1e0;

begin: elements;

	joint: 1, clamp, 1, node, node;

	body: 1, 2, 
		1.8, 
		reference, 20, 0.16, 0., 0.,
		diag, 0.01, 0.01, 0.015;
	body: 2, 3,
		1.6, 
		reference, 30, 0.16, 0., 0.,
		diag, 0.01, 0.01, 0.013;
	body: 3, 4,
		1.6, 
		reference, 40, 0.16, 0., 0., 
		diag, 0.01, 0.01, 0.013;

	joint: 2,
		total joint,
		1,
			position, reference, ground, null,
			position orientation, reference, ground, eye,
			# rotation orientation, reference, ground, eye,
			rotation orientation, reference, node, eye,
		2,
			position, reference, 20, null,
			position orientation, reference, 20, eye,
			# rotation orientation, reference, 20, eye,
			rotation orientation, reference, node, eye,
		position constraint, 1, 1, 1,
			null,
		orientation constraint, 1, 1, 0,
			null;

	set: real KC = 1.;
	set: real KP1 = 1.e2;
	set: real KD1 = 1.e-2;
	set: real KP2 = 1.e1;
	set: real KD2 = 1.e-1;
	set: real KP3 = 1.e0;
	set: real KD3 = 1.e-2;

	#set: real KC = 0.;
	#set: real KP = 5.e1;
	#set: real KD = 5.e-1;

	force: 2, total internal,
		1,
			position, reference, ground, null,
			force orientation, reference, ground, eye,
			moment orientation, reference, node, eye,
		2,
			position, reference, 20, null,
			force orientation, reference, 20, eye,
			moment orientation, reference, node, eye,
		moment, 0., 0., 1.,
			array, 5,
				file, 1, 1, amplitude, KC,
				file, 2, 1, amplitude, -KP1,
				element, 2, joint, string, "rz", linear, 0., KP1,
				file, 3, 1, amplitude, -KD1,
				element, 2, joint, string, "wz", linear, 0., KD1;

	joint: 122,
		deformable hinge,
		1,
			position, reference, ground, null,
			orientation, reference, ground, eye,
		2,
			position, reference, 20, null,
			orientation, reference, other node, eye,
		linear elastic, K1;

	joint: 3,
		total joint,
		2,
			position, reference, 30, null,
			position orientation, reference, 20, eye,
			# rotation orientation, reference, 20, eye,
			rotation orientation, reference, node, eye,
		3,
			position, reference, 30, null,
			position orientation, reference, 20, eye,
			# rotation orientation, reference, 20, eye,
			rotation orientation, reference, node, eye,
		position constraint, 1, 1, 1,
			null,
		orientation constraint, 1, 1, 0,
			null;
		
	force: 3, total internal,
		2,
			position, reference, 30, null,
			force orientation, reference, 20, eye,
			moment orientation, reference, node, eye,
		3,
			position, reference, 30, null,
			force orientation, reference, 20, eye,
			moment orientation, reference, node, eye,
		moment, 0., 0., 1.,
			array, 5,
				file, 1, 2, amplitude, KC,
				file, 2, 2, amplitude, -KP2,
				element, 3, joint, string, "rz", linear, 0., KP2,
				file, 3, 2, amplitude, -KD2,
				element, 3, joint, string, "wz", linear, 0., KD2;

	joint: 4,
		total joint,
		3,
			position, reference, 40, null,
			position orientation, reference, 30, eye,
			# rotation orientation, reference, 30, eye,
			rotation orientation, reference, node, eye,
		4,
			position, reference, 40, null,
			position orientation, reference, 30, eye,
			# rotation orientation, reference, 30, eye,
			rotation orientation, reference, node, eye,
		position constraint, 1, 1, 1,
			null,
		orientation constraint, 1, 1, 0,
			null;

	force: 4, total internal,
		3,
			position, reference, 40, null,
			force orientation, reference, 30, eye,
			moment orientation, reference, node, eye,
		4,
			position, reference, 40, null,
			force orientation, reference, 30, eye,
			moment orientation, reference, node, eye,
		moment, 0., 0., 1.,
			array, 5,
				file, 1, 3, amplitude, KC,
				file, 2, 3, amplitude, -KP3,
				element, 4, joint, string, "rz", linear, 0., KP3,
				file, 3, 3, amplitude, -KD3,
				element, 4, joint, string, "wz", linear, 0., KD3;
end: elements;

# vim:ft=mbd

##############################################################################################################
## Variables to be updated by simple_testsuite.sh --update-reference-test-status
## Warning, do not edit!!!
## @MBDYN_SIMPLE_TESTSUITE_EXIT_STATUS@ = 1
##############################################################################################################

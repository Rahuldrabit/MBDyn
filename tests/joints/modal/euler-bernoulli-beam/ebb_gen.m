% $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/joints/modal/euler-bernoulli-beam/ebb.m,v 1.2 2015/04/18 20:30:24 masarati Exp $

% This script generates the FEM database file for a two-node beam element
% with uniform stiffness and mass properties
% based on the Euler-Bernoulli formulation.
% The element provides 6 "modes", associated with
% the 6 displacement/rotation components at the "other" end.
% The origin is at one end; a modal node associated with the modal joint
% represents the motion of that end of the beam, and thus can be used
% to interface the modal joint with the multibody world
% This element is equivalent to a substructuring element with
% exactly one substructuring interface node and only interface shapes.

% main data; change as needed
fname = 'ebb.fem'; % FEM database file name

L = .5; % length
EA = 1e10; % axial stiffness (displacement along x)
EJy = 1e6; % bending stiffness about y (displacement along z)
EJz = 1e8; % bending stiffness about z (displacement along y)
GJ = 1e4; % torsional stiffness (about x)
m = 1.; % mass per unit span
Ix = 1e-2; % torsional inertia (about x)
Iy = 0.; % bending inertia about y (currently unused)
Iz = 0. % bending inertia about z (currently unused);

% NOTE: all axes coincident!

% N of (fake) internal nodes
N = 11;

% DO NOT CHANGE BELOW THIS LINE

% axial matrices
K_aa_e = EA/L*[1, -1;-1, 1];
M_aa_e = L*m*[2, 1; 1, 2]/6;

% torsional matrices
K_tt_e = GJ/L*[1, -1;-1, 1];
M_tt_e = L*Ix*[2, 1; 1, 2]/6;

% bending matrices (y, v)
K_vv_e = EJy/L^3*[12, 6*L, -12, 6*L;
		 6*L, 4*L^2, -6*L, 2*L^2;
		 -12, -6*L, 12, -6*L;
		 6*L, 2*L^2, -6*L, 4*L^2];
M_vv_e = m*L/420*[156, 22*L, 54, -13*L;
		  22*L, 4*L^2, 13*L, -3*L^2;
		  54, 13*L, 156, -22*L;
		  -13*L, -3*L^2, -22*L, 4*L^2];

% bending matrices (z, w)
K_ww_e = EJz/L^3*[12, -6*L, -12, -6*L;
		 -6*L, 4*L^2, 6*L, 2*L^2;
		 -12, 6*L, 12, 6*L;
		 -6*L, 2*L^2, 6*L, 4*L^2];
M_ww_e = m*L/420*[156, -22*L, 54, 13*L;
		  -22*L, 4*L^2, -13*L, -3*L^2;
		  54, -13*L, 156, 22*L;
		  13*L, -3*L^2, 22*L, 4*L^2];

K = zeros(6, 6);
K(1, 1) = K_aa_e(2, 2);
K(4, 4) = K_tt_e(2, 2);
K([2 6], [2 6]) = K_vv_e(3:4, 3:4);
K([3 5], [3 5]) = K_ww_e(3:4, 3:4);

M = zeros(6, 6);
M(1, 1) = M_aa_e(2, 2);
M(4, 4) = M_tt_e(2, 2);
M([2 6], [2 6]) = M_vv_e(3:4, 3:4);
M([3 5], [3 5]) = M_ww_e(3:4, 3:4);

Mn = m*L/(N - 1);
Ixn = Ix*L/(N - 1);

fd = fopen(fname, 'w');
fprintf(fd, '** Euler-Bernoulli beam element implemented as modal joint - attached axes\n');
fprintf(fd, '** Generated by ''ebb.m'' - DO NOT EDIT! (unless you know what you''re doin'')\n');
fprintf(fd, '**\n');
fprintf(fd, '** NODE SET "ALL"\n');
fprintf(fd, '**\n');

fprintf(fd, '** RECORD GROUP 1, HEADER\n');
fprintf(fd, '**   REVISION.  NODES.  NORMAL, ATTACHMENT, CONSTRAINT, REJECTED MODES.\n');
fprintf(fd, 'REV85            %15d %15d %15d %15d %15d\n', N, 0, 6, 0, 0);

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 2, FINITE ELEMENT NODE LIST\n');
for i = 1:N,
	if ((i > 1) && ((i - 1)/6 == fix((i - 1)/6))),
		fprintf(fd, '\n');
	end
	fprintf(fd, ' %15d', i);
end
fprintf(fd, '\n');

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 3, INITIAL MODAL DISPLACEMENTS\n');
for i = 1:6,
	fprintf(fd, '%+16.8e', 0);
end
fprintf(fd, '\n');

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 4, INITIAL MODAL VELOCITIES\n');
for i = 1:6,
	fprintf(fd, '%+16.8e', 0);
end
fprintf(fd, '\n');

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 5, NODAL X COORDINATES\n');
for i = 1:N,
	if ((i > 1) && ((i - 1)/6 == fix((i - 1)/6))),
		fprintf(fd, '\n');
	end
	fprintf(fd, '%+16.8e', (i - 1)/(N - 1)*L);
end
fprintf(fd, '\n');

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 6, NODAL Y COORDINATES\n');
for i = 1:N,
	if ((i > 1) && ((i - 1)/6 == fix((i - 1)/6))),
		fprintf(fd, '\n');
	end
	fprintf(fd, '%+16.8e', 0);
end
fprintf(fd, '\n');

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 7, NODAL Z COORDINATES\n');
for i = 1:N,
	if ((i > 1) && ((i - 1)/6 == fix((i - 1)/6))),
		fprintf(fd, '\n');
	end
	fprintf(fd, '%+16.8e', 0);
end
fprintf(fd, '\n');

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 8, NON-ORTHOGONALIZED MODE SHAPES\n');
xi = [0:N - 1]*2/(N - 1) - 1;
n_l2 = (1 + xi)/2;
n_c3 = (2 + 3*xi - xi.^3)./4;
n_c3d = (0 + 3 - 3*xi.^2)./4*(2/L);
n_c4 = (-1 - xi + xi.^2 + xi.^3)*(L/2)/4;
n_c4d = (0 - 1 + 2*xi + 3*xi.^2)*(L/2)/4*(2/L);

fprintf(fd, '**    NORMAL MODE SHAPE # 1\n');
for i = 1:N,
	fprintf(fd, '%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e\n', n_l2(i), 0, 0, 0, 0, 0);
end

fprintf(fd, '**    NORMAL MODE SHAPE # 2\n');
for i = 1:N,
	fprintf(fd, '%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e\n', 0, n_c3(i), 0, 0, 0, n_c3d(i));
end

fprintf(fd, '**    NORMAL MODE SHAPE # 3\n');
for i = 1:N,
	fprintf(fd, '%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e\n', 0, 0, n_c3(i), 0, -n_c3d(i), 0);
end

fprintf(fd, '**    NORMAL MODE SHAPE # 4\n');
for i = 1:N,
	fprintf(fd, '%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e\n', 0, 0, 0, n_l2(i), 0, 0);
end

fprintf(fd, '**    NORMAL MODE SHAPE # 5\n');
for i = 1:N,
	fprintf(fd, '%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e\n', 0, n_c4(i), 0, 0, 0, n_c4d(i));
end

fprintf(fd, '**    NORMAL MODE SHAPE # 6\n');
for i = 1:N,
	fprintf(fd, '%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e\n', 0, 0, -n_c4(i), 0, n_c4d(i), 0);
end

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 9, MODAL MASS MATRIX.  COLUMN-MAJOR FORM\n');
for i = 1:6,
	for j = 1:6,
		fprintf(fd, '%+16.8e', M(i, j));
	end
	fprintf(fd, '\n');
end

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 10, MODAL STIFFNESS MATRIX.  COLUMN-MAJOR FORM\n');
for i = 1:6,
	for j = 1:6,
		fprintf(fd, '%+16.8e', K(i, j));
	end
	fprintf(fd, '\n');
end

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 11, DIAGONAL OF LUMPED MASS MATRIX\n');
for i = 1:N,
	if ((i == 1) || (i == N)),
		mm = Mn/2;
		ixx = Ixn/2;
	else
		mm = Mn;
		ixx = Ixn;
	end
	fprintf(fd, '%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e%+16.8e\n', mm, mm, mm, ixx, 0, 0);
end

fprintf(fd, '**\n');
fprintf(fd, '** RECORD GROUP 12, GLOBAL INERTIA\n');
fprintf(fd, '%+16.8e\n', m*L);
fprintf(fd, '%+16.8e%+16.8e%+16.8e\n', L/2, 0, 0);
fprintf(fd, '%+16.8e%+16.8e%+16.8e\n', Ix*L, 0, 0);
fprintf(fd, '%+16.8e%+16.8e%+16.8e\n', 0, m*L^3/12, 0);
fprintf(fd, '%+16.8e%+16.8e%+16.8e\n', 0, 0, m*L^3/12);

%fprintf(fd, '**\n');
%fprintf(fd, '** RECORD GROUP 13, MODAL DAMPING MATRIX.  COLUMN-MAJOR FORM\n');

fclose(fd);


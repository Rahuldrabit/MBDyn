# $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/namespaces/model,v 1.9 2015/01/24 12:20:04 masarati Exp $

# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2010
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 

begin: data;
	problem: initial value;
end: data;

begin: initial value;
	initial time: 0;
	final time: 10;
	time step: 1.e-3;

	derivatives tolerance: 1e-6;
	derivatives max iterations: 10;

	tolerance: 1e-6;
	max iterations: 20;

	# output: iterations;
threads: disable;
end: initial value;

begin: control data;
	structural nodes: 2;
	joints: 1;
	rigid bodies: 1;
	forces: 1;
end: control data;

reference: 0, null, eye, null, null;

begin: nodes;
	structural: 1, static,
		reference, global, null,
		reference, global, eye,
		reference, global, null,
		reference, global, null;
	structural: 2, dynamic,
		reference, global, 1.,2.,3.,
		reference, global, eye,
		reference, global, -1.,-2.,-3.,
		reference, global, null;
end: nodes;

set: real x;
set: x = model::position(2);
remark: "model::position(2) expected: sqrt(1.^2 + 2.^2 + 3.^2)=3.74166, actual", x;
set: x = model::position2(2);
remark: "model::position2(2) expected: (1.^2 + 2.^2 + 3.^2)=14, actual", x;
set: x = model::xposition(2);
remark: "model::xposition(2) expected: 1, actual", x;
set: x = model::yposition(2);
remark: "model::yposition(2) expected: 2, actual", x;
set: x = model::zposition(2);
remark: "model::zposition(2) expected: 3, actual", x;
set: x = model::distance(1, 2);
remark: "model::distance(1, 2) expected: sqrt(1.^2 + 2.^2 + 3.^2)=3.74166, actual", x;
set: x = model::distance2(1, 2);
remark: "model::distance2(1, 2) expected: (1.^2 + 2.^2 + 3.^2)=14, actual", x;
set: x = model::xdistance(1, 2);
remark: "model::xdistance(1, 2) expected: 1, actual", x;
set: x = model::ydistance(1, 2);
remark: "model::ydistance(1, 2) expected: 2, actual", x;
set: x = model::zdistance(1, 2);
remark: "model::zdistance(1, 2) expected: 3, actual", x;
set: x = model::anglerel(1, 2);
set: x = model::xanglerel(1, 2);
set: x = model::yanglerel(1, 2);
set: x = model::zanglerel(1, 2);
set: x = model::velocity(1);
set: x = model::velocity2(1);
set: x = model::xvelocity(1);
set: x = model::yvelocity(1);
set: x = model::zvelocity(1);
set: x = model::vrel(1, 2);
set: x = model::vrel2(1, 2);
set: x = model::xvrel(1, 2);
set: x = model::yvrel(1, 2);
set: x = model::zvrel(1, 2);

scalar function: "myfunc", /* piecewise */ multilinear,
	2.,		8.,
	3.,		5.,
	5.,		4.,
	6.,		1.;
set: x = model::sf::myfunc(4.);
remark: "model::sf::myfunc(4.) expected: 4.5, actual", x;

set: const integer LABEL = 99;
drive caller: LABEL, linear, 1., 10.;
set: x = model::drive(LABEL, 2.);

begin: elements;
	joint: 1, clamp, 1, node, node;
	body: 2, 2,
		1.e-2,
		null,
		eye;
	set: string x3 = "X[3]";
        remark: "x3", x3;
	force: 2, absolute,
		2,
		position, null,
		0.,0.,1.,
		array, 7,
			string, "model::position(1)",
			string, "-model::zposition(2)",
			string, ".001*model::distance2(1,2)",
			string, "-model::zvelocity(2)",
			const, model::node::structural(2, "X[1]"),
			const, model::element::body(2, "V"),
			mult,
				string, "-.01*model::vrel(1,2) + model::node::structural(2, \22X[2]\22) + model::node::structural(2, x3)",
				string, ".00004*model::drive(LABEL, 2.)";

	set: (model::node::structural(2, "X[1]"); x = -999);
	remark: "x expected: -999, actual", x;
	set: x = model::node::structural(2, "X[1]");
	remark: "model::node::structural(2, \"X[1]\") expected: 1, actual", x;
	set: x = model::element::body(2, "V");
	remark: "model::element::body(2, \"V\") expected: 0, actual", x;
	set: x = model::vrel(1,2);
	remark: "model::vrel(1,2) expected: sqrt((-1.)^2 + (-2.)^2 + (-3.)^2)=3.74166, actual", x;
	set: x = model::node::structural(2, "X[2]");
	remark: "model::node::structural(2, \"X[2]\") expected: 2, actual", x;
	set: x = model::node::structural(2, x3);
	remark: "model::node::structural(2, x3) expected: 3, actual", x;
	set: x = model::drive(LABEL, 2.);
	remark: "LABEL", LABEL;
	remark: "model::drive(LABEL, 2.) expected: 21, actual", x;
	set: x = (model::node::structural(2, x3) + model::node::structural(2, x3))/2;
	remark: "(model::node::structural(2, x3) + model::node::structural(2, x3))/2 expected: 3, actual", x;
end: elements;

# vim:ft=mbd

##############################################################################################################
## Variables to be updated by simple_testsuite.sh --update-reference-test-status
## Warning, do not edit!!!
## @MBDYN_SIMPLE_TESTSUITE_EXIT_STATUS@ = 0
##############################################################################################################

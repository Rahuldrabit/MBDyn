# $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/plates/chimakurthi2009/case4/case4.awk,v 1.8 2017/01/12 15:06:54 masarati Exp $
#
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2017
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

function header(out) {
	printf "" > out;
	print "# MBDyn (C) is a multibody analysis code. " >> out;
	print "# http://www.mbdyn.org" >> out;
	print "# " >> out;
	print "# Copyright (C) 1996-2017" >> out;
	print "# " >> out;
	print "# Pierangelo Masarati	<masarati@aero.polimi.it>" >> out;
	print "# Paolo Mantegazza	<mantegazza@aero.polimi.it>" >> out;
	print "# " >> out;
	print "# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano" >> out;
	print "# via La Masa, 34 - 20156 Milano, Italy" >> out;
	print "# http://www.aero.polimi.it" >> out;
	print "# " >> out;
	print "# Changing this copyright notice is forbidden." >> out;
	print "# " >> out;
	print "# This program is free software; you can redistribute it and/or modify" >> out;
	print "# it under the terms of the GNU General Public License as published by" >> out;
	print "# the Free Software Foundation (version 2 of the License)." >> out;
	print "# " >> out;
	print "# " >> out;
	print "# This program is distributed in the hope that it will be useful," >> out;
	print "# but WITHOUT ANY WARRANTY; without even the implied warranty of" >> out;
	print "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the" >> out;
	print "# GNU General Public License for more details." >> out;
	print "# " >> out;
	print "# You should have received a copy of the GNU General Public License" >> out;
	print "# along with this program; if not, write to the Free Software" >> out;
	print "# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA" >> out;
	print "# " >> out;

	print "# GENERATED BY 'case4.awk' - DO NOT EDIT" >> out;
	print "" >> out;
}

BEGIN {
	E = 70.0e9;
	nu = 0.3;
	L = 0.080;
	b = 0.027;
	h = 0.0002;	# Ref. reports 0.002 m :(
	rho = 2700.0;

	if (mesh == "32x9") {
		N_L = 32;
		N_B = 9;
		N_JL = 2;
		N_JB = 2;

	} else if (mesh == "16x6") {
		N_L = 16;
		N_B = 6;
		N_JL = 1;
		N_JB = 1;

	} else if (mesh == "16x9") {
		N_L = 16;
		N_B = 6;
		N_JL = 1;
		N_JB = 2;

	} else if (mesh == "") {
		print "### need \"mesh\"" > "/dev/stderr";
		exit;

	} else if (0) {
		nf = match(mesh, "([[:digit:]]+)x([[:digit:]]+)", a);
		if (nf == 0) {
			print "### mesh " mesh " not in \"<nL>x<nb>\" format" > "/dev/stderr";
			exit;
		}

		N_L = a[1] + 0;
		N_B = a[2] + 0;

		if (N_L <= 0 || N_B <= 0) {
			printf "### invalid mesh \"%dx%d\"\n", N_L, N_B > "/dev/stderr";
			exit;
		}

		printf "### mesh \"%dx%d\" non-standard; YMMV\n", N_L, N_B > "/dev/stderr";

	} else {
		printf "### non-standard mesh disallowed" > "/dev/stderr";
		exit;
	}
	fname = "case4_m";

	out = fname ".set";
	header(out);

	printf "# mesh: %dx%d\n", N_L, N_B >> out;
	print "" >> out;

	printf "set: const integer NNODES = %d;\n", (N_L + 1)*(N_B + 1) >> out;
	printf "set: const integer NBODIES = %d;\n", (N_L + 1)*(N_B + 1) >> out;
	printf "set: const integer NSHELLS = %d;\n", N_L*N_B >> out;
	printf "set: const integer NJOINTS = %d;\n", (N_JL + 1)*(N_JB + 1) >> out;
	# printf "set: const integer NJOINTS = %d;\n", N_B + 1 + (N_JB + 1)*N_JL >> out;
	print "" >> out;
	printf "set: const real E = %.6e;\n", E >> out;
	printf "set: const real nu = %.6e;\n", nu >> out;
	printf "set: const real rho = %.6e;\n", rho >> out;
	printf "set: const real L = %.6e;\n", L >> out;
	printf "set: const real b = %.6e;\n", b >> out;
	printf "set: const real h = %.6e;\n", h >> out;
	print "" >> out;
	printf "set: real FREQ;\n" >> out;
	printf "set: real A = %.6e*deg2rad;\n", 17. >> out;
	print "" >> out;
	printf "# %s:ft=mbd\n", "vim" >> out;

	out = fname ".nod";
	header(out);

	DELTA_N_L = 1000;
	for (nl = 0; nl <= N_L; nl++) {
		x = L*(nl/N_L);
		for (nb = 0; nb <= N_B; nb++) {
			y = b*(-.5 + nb/N_B);
			z = 0.;

			label = DELTA_N_L*nl + nb;

			printf "structural: %d, dynamic,\n", label >> out;
			printf "\treference, 0, %+.8e, %+.8e, %+.8e,\n", x, y, z >> out;
			printf "\treference, 0, eye,\n" >> out;
			print "\treference, 0, null," >> out;
			print "\treference, 0, null;" >> out;
			print "" >> out;
		}
	}
	print "" >> out;
	printf "# %s:ft=mbd\n", "vim" >> out;

	out = fname ".elm";
	header(out);

	for (nl = 0; nl <= N_JL; nl++) {
		for (nb = 0; nb <= N_JB; nb++) {
			label = DELTA_N_L*nl + nb;
			printf "joint: %d, total pin joint,\n", label >> out;
			printf "\t%d, position, reference, 0, null,\n", label >> out;
			print "\t\tposition orientation, reference, node, eye," >> out;
			print "\t\trotation orientation, reference, node, eye," >> out;
			print "\tposition, reference, 0, null,\n" >> out;
			print "\tposition orientation, reference, 0, eye," >> out;
			print "\trotation orientation, reference, 0, eye," >> out;
			print "\tposition constraint, 1, 1, 1, null," >> out;
			print "\torientation constraint, 1, 1, 1, 0., -1., 0., cosine, 0., 2*pi*FREQ, A, forever, 0.;" >> out;
			print "" >> out;
		}
	}
	if (0) {
	for (nb = N_JB + 1; nb <= N_B; nb++) {
		label = DELTA_N_L*nl + nb;
		printf "joint: %d, total pin joint,\n", label >> out;
		printf "\t%d, position, reference, 0, null,\n", label >> out;
		print "\t\tposition orientation, reference, node, eye," >> out;
		print "\t\trotation orientation, reference, node, eye," >> out;
		print "\tposition, reference, 0, null,\n" >> out;
		print "\tposition orientation, reference, 0, eye," >> out;
		print "\trotation orientation, reference, 0, eye," >> out;
		print "\tposition constraint, 1, 1, 1, null," >> out;
		print "\torientation constraint, 1, 0, 1, null;" >> out;
		print "" >> out;
	}
	print "" >> out;
	}

	DELTA_X = L/N_L;
	DELTA_Y = b/N_B;
	for (nl = 0; nl <= N_L; nl++) {
		for (nb = 0; nb <= N_B; nb++) {
			label = DELTA_N_L*nl + nb;

			D_X = DELTA_X;
			D_Y = DELTA_Y;
			if (nl == 0 || nl == N_L) {
				D_X /= 2;
			}
			if (nb == 0 || nb == N_B) {
				D_Y /= 2;
			}

			D_A = D_X*D_Y;

			D_X_CM = 0.;
			D_Y_CM = 0.;
			if (nl == 0) {
				D_X_CM = DELTA_X/4;
			} else if (nl == N_L) {
				D_X_CM = -DELTA_X/4;
			}
			if (nb == 0) {
				D_Y_CM = DELTA_Y/4;
			} else if (nb == N_B) {
				D_Y_CM = -DELTA_Y/4;
			}

			printf "body: %d, %d,\n", label, label >> out;
			printf "\t%+.8e*rho*h,\n", D_A >> out;
			printf "\treference, node, %+.8e, %+.8e, %+.8e,\n", D_X_CM, D_Y_CM, 0. >> out;
			printf "\tdiag, %+.8e*rho*h/12, %+.8e*rho*h/12, %+.8e*rho*h/12;", D_A*D_Y*D_Y, D_A*D_X*D_X, D_A*(D_X*D_X + D_Y*D_Y) >> out;
			print "" >> out;
		}
	}
	print "" >> out;
	# type = "shell4eas";
	type = "shell4easans";
	for (nl = 1; nl <= N_L; nl++) {
		for (nb = 1; nb <= N_B; nb++) {
			label1 = DELTA_N_L*nl + (nb - 1);
			label2 = DELTA_N_L*nl + nb;
			label3 = DELTA_N_L*(nl - 1) + nb;
			label4 = DELTA_N_L*(nl - 1) + (nb - 1);

			printf "%s: %d,\n", type, DELTA_N_L*nl + nb >> out;
			printf "\t%d, %d, %d, %d,\n",
				label1, label2, label3, label4 >> out;
			print "\tisotropic, E, E, nu, nu, thickness, h;" >> out;
			print "" >> out;
		}
	}
	print "" >> out;
	printf "# %s:ft=mbd\n", "vim" >> out;
}

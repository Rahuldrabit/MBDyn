% $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/rbk/tnd371/tnd371.m,v 1.2 2009/03/13 11:50:10 masarati Exp $
%
% Creates tnd371.set, tnd371.nod and tnd371.elm files,
% included by tnd371.mbd. It reproduces cases of a single tapered, 
% twisted, rotating beam with infinite torsional stiffness, 
% as in NACA-TN-D-371.pdf
% The model is completely parametric.
% 
% Geometry: 
%	x = spanwise
% 	y = chordwise
%	z = rotation axis
% 
% input data:
% 
% rho_r = linear mass density at the root of the blade
% rho_t = linear mass density at the tip of the blade
% R = rotor radius
% EI1_r = bending (My) stiffness of the root section
% EI1_t = bending (My) stiffness of the tip section
% gamma2 = EI1_r / EI2_r (EI2_r = bending (Mz) stiffness
% 			  at the root section)
% NB: assume linear variations in rho and EI due to tapering
%
% theta = twist angle 
% beta0 = incidence of the root section, beta at tip = beta0-theta 
% e = offset (in x) of blade root from rotation axis 
% articulated = 0/1 -> set 0 if the blade is clamped, 1 if hinged
% N_BEAM = number of beam elements used for discretization
% RPM = rotation rate
% 
% 
%
% Author: Alessandro Fumagalli

clear all;

rho_r = 1;
rho_t = 1;
R = 4; 
EI1_r = 1.e2; 
EI1_t = 1.e2; 
gamma2 = 0.1; 
theta =  0 * pi/180;
beta0 =  theta; 
e = 0.05*R; % offset of blade root
articulated = 0; % clamped blade
articulated = 1; % articulated blade

N_BEAM = 5;
RPM = 120;

%beamtype = 2; % use 2nodes beam
beamtype = 3;  % use 3nodes beam

Tfin = 1;
dt = 1.e-3;
Teig = Tfin;
tapered = 0;

if(rho_r-rho_t > 1.e-6)
	tapered = 1;
end


inf = 1.e8;
zero = 1.e-8;

if beamtype == 2
	N_STR_NOD = 1 + N_BEAM;
else 
	N_STR_NOD = 1 + 2*N_BEAM;
end

rhoslope = rho_t - rho_r;
EIslope = EI1_t - EI1_r;

dL = R / (N_STR_NOD - 1); 	% X distance between nodes
dtheta = theta/(N_STR_NOD - 1); % delta twist between nodes

dx = 1 / (N_STR_NOD - 1); 	% local coordinate: 
				% x = 0 -> root
				% x = 1 -> tip

if articulated
	N_BODY = N_STR_NOD;
else
	N_BODY = N_STR_NOD - 1;
end

% set data
fid = fopen('tnd371.set','w');

fprintf(fid, '# Rotor blade model for MBDyn > 1.3.4\n');
fprintf(fid, '# Author: Alessandro Fumagalli <fumagalli@aero.polimi.it>\n')
fprintf(fid, '#\n')
fprintf(fid, '# Data from:\n')
fprintf(fid, '#\n')
fprintf(fid, '# NASA Technical Note - D-371\n')
fprintf(fid, '#\n')
fprintf(fid, '# Natural Frequencies in Bending of Twisted Rotating and Nonrotating Blades\n')
fprintf(fid, '# G. Isakson and J.G. Eisley\n')
fprintf(fid, '# Univeristy of Michigan\n')
fprintf(fid, '#\n')
fprintf(fid, '# <http://hdl.handle.net/2060/19890068582>\n')
fprintf(fid, '#\n');
fprintf(fid, '# GENERATED BY tnd371.m - DO NOT EDIT!\n')
fprintf(fid, '\n');

	fprintf(fid,'set: integer N_STR_NOD = %d;\n',N_STR_NOD);	
	fprintf(fid,'set: integer N_BEAM = %d;\n',2*N_BEAM);	
	fprintf(fid,'set: integer N_BODY = %d;\n',N_BODY);	
	fprintf(fid,'set: real RPM = %g;\n',RPM);	
	fprintf(fid,'set: real Tfin = %g;\n',Tfin);	
	fprintf(fid,'set: real Teig = %g;\n',Teig);	
	fprintf(fid,'set: real dt = %g;\n',dt);	
fclose(fid);
	


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% nodes: tnd371.nod
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fid = fopen('tnd371.nod','w');

fprintf(fid, '# Rotor blade model for MBDyn > 1.3.4\n');
fprintf(fid, '# Author: Alessandro Fumagalli <fumagalli@aero.polimi.it>\n')
fprintf(fid, '#\n')
fprintf(fid, '# Data from:\n')
fprintf(fid, '#\n')
fprintf(fid, '# NASA Technical Note - D-371\n')
fprintf(fid, '#\n')
fprintf(fid, '# Natural Frequencies in Bending of Twisted Rotating and Nonrotating Blades\n')
fprintf(fid, '# G. Isakson and J.G. Eisley\n')
fprintf(fid, '# Univeristy of Michigan\n')
fprintf(fid, '#\n')
fprintf(fid, '# <http://hdl.handle.net/2060/19890068582>\n')
fprintf(fid, '#\n');
fprintf(fid, '# GENERATED BY tnd371.m - DO NOT EDIT!\n')
fprintf(fid, '\n');

fprintf(fid,'structural: 1, ');
if articulated
	fprintf(fid,'dynamic,\n');
else 
	fprintf(fid,'static,\n');
end
fprintf(fid,'\tposition, reference, global, %e, 0., 0.,\n',e);
fprintf(fid,'\torientation, reference, global, 1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',beta0,beta0);
fprintf(fid,'\tvelocity, reference, global, 0., 0., 0.,\n');
fprintf(fid,'\tangular velocity, reference, global, 0., 0., 0.;\n\n');

x = 0;
for i=2:N_STR_NOD
	x = x + dx;
	beta = beta0 - (theta*x);
	fprintf(fid,'structural: %d, dynamic,\n',i); 	
	fprintf(fid,'\tposition, reference, global, %e, 0., 0.,\n',e+x*R);
	fprintf(fid,'\torientation, reference, global, 1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',beta,beta);
	fprintf(fid,'\tvelocity, reference, global, 0., 0., 0.,\n');
	fprintf(fid,'\tangular velocity, reference, global, 0., 0., 0.;\n\n');
end	
fclose(fid);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% elements: tnd371.elm
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fid = fopen('tnd371.elm','w');

fprintf(fid, '# Rotor blade model for MBDyn > 1.3.4\n');
fprintf(fid, '# Author: Alessandro Fumagalli <fumagalli@aero.polimi.it>\n')
fprintf(fid, '#\n')
fprintf(fid, '# Data from:\n')
fprintf(fid, '#\n')
fprintf(fid, '# NASA Technical Note - D-371\n')
fprintf(fid, '#\n')
fprintf(fid, '# Natural Frequencies in Bending of Twisted Rotating and Nonrotating Blades\n')
fprintf(fid, '# G. Isakson and J.G. Eisley\n')
fprintf(fid, '# Univeristy of Michigan\n')
fprintf(fid, '#\n')
fprintf(fid, '# <http://hdl.handle.net/2060/19890068582>\n')
fprintf(fid, '#\n');
fprintf(fid, '# GENERATED BY tnd371.m - DO NOT EDIT!\n')
fprintf(fid, '\n');

% clamp root node
if articulated
	fprintf(fid,'joint: 1, revolute pin,\n');
	fprintf(fid,'\t1,\n');
	fprintf(fid,'\treference, global, %e, 0, 0,\n',e);
	fprintf(fid,'\thinge, reference, global, 1, 1, 0, 0, 3, 0, 1, 0,\n',e);
	fprintf(fid,'\treference, global, %e, 0, 0,\n',e);
	fprintf(fid,'\thinge,reference, global, 1, 1, 0, 0, 3, 0, 1, 0;\n\n',e);
else
	fprintf(fid,'joint: 1, clamp, 1, node, node;\n\n');
end

% bodies:

x = 0;
x_a = 0;
x_b = 0;
if articulated
	dLtmp = dL/2;
	x_a = 0;
	x_b = x_a + dLtmp;
	offset1 = 0;
	offset1 = dLtmp/2;
	offset2 = dLtmp/2 - dLtmp/6;
	rho_a = rho_r + rhoslope*x_a; 
	rho_b = rho_r + rhoslope*x_b; 
	m1 = rho_b * dLtmp;
	if(m1<=zero) m1 = zero; end
	Jxx1 = zero;
	Jyy1 = m1 * dLtmp^2 / 12;
	Jzz1 = Jyy1;
	fprintf(fid,'body: %d, %d,\n',1,1); 	
	if tapered  
		fprintf(fid,'\tcondense, 2,\n'); 
	end
	fprintf(fid,'\t%e,\n',m1);
	fprintf(fid,'\treference, node, %e, 0, 0,\n',offset1);
	fprintf(fid,'\tdiag, %e, %e, %e',Jxx1,Jyy1,Jzz1);
	if tapered  
		fprintf(fid,',\n');
		m2 = abs(rhoslope)/2 * dLtmp;
		Jxx2 = zero;
		Jyy2 = m2 * dLtmp^2 / 12;
		Jzz2 = Jyy2;
		fprintf(fid,'\t%e,\n',m2);
		fprintf(fid,'\treference, node, %e, 0, 0,\n',offset2);
		fprintf(fid,'\tdiag, %e, %e, %e;\n\n',Jxx2,Jyy2,Jzz2);
	else
		fprintf(fid,';\n\n');
	end
end

for i=2:N_STR_NOD
	x_a = x+dL/2;
	x_b = x_a + dL;
	offset1 = 0;
	if i == N_STR_NOD
		dL = dL/2;
		x_b = x_a + dL;
		offset1 = -dL/2;
		offset2 = -dL/2 - dL/6;
	end
	rho_a = rho_r + rhoslope*x_a; 
	rho_b = rho_r + rhoslope*x_b; 
	m1 = rho_b * dL;
	if(m1<=zero) m1 = zero; end
	Jxx1 = zero;
	Jyy1 = m1 * dL^2 / 12;
	Jzz1 = Jyy1;
	fprintf(fid,'body: %d, %d,\n',i,i); 	
	if tapered  
		fprintf(fid,'\tcondense, 2,\n'); 
	end
	fprintf(fid,'\t%e,\n',m1);
	fprintf(fid,'\treference, node, %e, 0, 0,\n',offset1);
	fprintf(fid,'\tdiag, %e, %e, %e',Jxx1,Jyy1,Jzz1);
	if tapered  
		fprintf(fid,',\n');
		offset2 = -dL/6;
		m2 = abs(rhoslope)/2 * dL;
		Jxx2 = zero;
		Jyy2 = m2 * dL^2 / 12;
		Jzz2 = Jyy2;
		fprintf(fid,'\t%e,\n',m2);
		fprintf(fid,'\treference, node, %e, 0, 0,\n',offset2);
		fprintf(fid,'\tdiag, %e, %e, %e;\n\n',Jxx2,Jyy2,Jzz2);
	else
		fprintf(fid,';\n\n');
	end
	x = x+dL;
end	


% beam elements

dL = R / (N_STR_NOD - 1); 	% X distance between nodes
x=dx/2;
EI1slope = EI1_t - EI1_r;
if beamtype == 2
	for i = 1:N_BEAM
		beta = beta0 - (theta*x);
		EI_1 = EI1_r + EI1slope*x;
		fprintf(fid,'beam2: %d,\n',i);
		fprintf(fid,'\t%d, reference, node, null,\n',i);
		fprintf(fid,'\t%d, reference, node, null,\n',i+1);
		fprintf(fid,'\treference, global, 1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',beta,beta);
		fprintf(fid,'\t1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',beta,beta);
		fprintf(fid,'\tlinear elastic generic,\n');
		fprintf(fid,'\tdiag,\n');
		fprintf(fid,'\t %e, %e, %e, %e, %e,', inf, inf, inf, inf, EI_1)
		if gamma2 > 0
			fprintf(fid,'%e;\n', EI_1/gamma2);
		else
			fprintf(fid,'%e;\n', inf);
		end
		fprintf(fid,'driven: %d, string, "Time < %e",\n',1000 + i, Teig - dt);
		fprintf(fid,'beam2: %d,\n',1000 + i);
		fprintf(fid,'\t%d, reference, node, null,\n',i);
		fprintf(fid,'\t%d, reference, node, null,\n',i+1);
		fprintf(fid,'\treference, global, 1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',beta,beta);
		fprintf(fid,'\t1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',beta,beta);
		fprintf(fid,'\tlinear viscous generic,\n');
		fprintf(fid,'\tdiag,\n');
		fprintf(fid,'\t %e, %e, %e, %e, %e,', inf, inf, inf, inf, EI_1)
		if gamma2 > 0
			fprintf(fid,'%e;\n', EI_1/gamma2);
		else
			fprintf(fid,'%e;\n', inf);
		end
		
	x = x + dx;
	end
end
if beamtype == 3
	xmid = dx;
	midnode = 2;
	for i = 1:N_BEAM
		xI = xmid-(1/(sqrt(3))*dx);
		xII = xmid+(1/(sqrt(3))*dx);
		EI_1_I = EI1_r + EI1slope*xI;
		EI_1_II = EI1_r + EI1slope*xII;
		fprintf(fid,'beam: %d,\n',i);
		fprintf(fid,'\t%d, reference, node, null,\n',midnode-1);
		fprintf(fid,'\t%d, reference, node, null,\n',midnode);
		fprintf(fid,'\t%d, reference, node, null,\n',midnode+1);
		betaI = beta0 - (theta*xI);
		betaII = beta0 - (theta*xII);
		fprintf(fid,'\treference, global, 1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',betaI,betaI);
		fprintf(fid,'\tlinear elastic generic,\n');
		fprintf(fid,'\tdiag,\n');
		fprintf(fid,'\t %e, %e, %e, %e, %e,', inf, inf, inf, inf, EI_1_I)
		if gamma2 > 0
			fprintf(fid,'%e,\n', EI_1_I/gamma2);
		else
			fprintf(fid,'%e,\n', inf);
		end
		fprintf(fid,'\treference, global, 1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',betaII,betaII);
		fprintf(fid,'\tlinear elastic generic,\n');
		fprintf(fid,'\tdiag,\n');
		fprintf(fid,'\t %e, %e, %e, %e, %e,', inf, inf, inf, inf, EI_1_II)
		if gamma2 > 0
			fprintf(fid,'%e;\n', EI_1_II/gamma2);
		else
			fprintf(fid,'%e;\n', inf);
		end
		% the driven viscous beam element 
		fprintf(fid,'driven: %d, string, "Time < %e",\n',1000 + i, Teig - dt);
		fprintf(fid,'beam: %d,\n',1000 + i);
		fprintf(fid,'\t%d, reference, node, null,\n',midnode-1);
		fprintf(fid,'\t%d, reference, node, null,\n',midnode);
		fprintf(fid,'\t%d, reference, node, null,\n',midnode+1);
		fprintf(fid,'\treference, global, 1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',betaI,betaI);
		fprintf(fid,'\tlinear viscous generic,\n');
		fprintf(fid,'\tdiag,\n');
		fprintf(fid,'\t %e, %e, %e, %e, %e,', inf, inf, inf, inf, EI_1_I)
		if gamma2 > 0
			fprintf(fid,'%e,\n', EI_1_I/gamma2);
		else
			fprintf(fid,'%e,\n', inf);
		end
		fprintf(fid,'\treference, global, 1, 1., 0., 0., 2, 0, cos(%e), sin(%e),\n',betaII,betaII);
		fprintf(fid,'\tlinear viscous generic,\n');
		fprintf(fid,'\tdiag,\n');
		fprintf(fid,'\t %e, %e, %e, %e, %e,', inf, inf, inf, inf, EI_1_II)
		if gamma2 > 0
			fprintf(fid,'%e;\n', EI_1_II/gamma2);
		else
			fprintf(fid,'%e;\n', inf);
		end


		xmid = xmid + 2*dx;
		midnode = midnode+2;
	end
end
fclose(fid);

